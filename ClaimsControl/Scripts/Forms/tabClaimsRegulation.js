// Generated by CoffeeScript 1.6.2
(function() {
  var w=window, App=w.App, Em=w.Em, oGLOBAL=w.oGLOBAL, oDATA=w.oDATA, oCONTROLS=w.oCONTROLS, MY=w.MY;  App.tabClaimsRegulationController = Em.ArrayController.create({
    stepsCont1: ['<a href="#">Parenkite ir siųskite</a><div>arba</div><a href="#">Užregistruokite</a>', '<a href="#">Patvirtinti, kad visa informacija yra pateikta</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę žalos sumą</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę išmokos sumą</a>', '<a href="#">Uždaryti bylą</a>'],
    stepsCont2: ['Draudikui pranešta ####', 'Visa informacija pateikta:</br>####</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė žalos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė išmokos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Byla uždaryta <a href="#"></br>Atidaryti</a>'],
    stepsConfirm: ['', '<p>Įveskite paskutinio dokumento pateikimo datą:</p><input class="date" type="text" value="####"><button class="btn btn-small">Patvirtinti</button>', '<p>Galutinė žalos dydžio suma - #### Lt.</p><button class="btn btn-small">Patvirtinti</button>', '<p>Galutinė išmokos dydžio suma - #### Lt</p><button class="btn btn-small">Patvirtinti</button>', ''],
    stepVal: [],
    stepsTemp: [
      {
        stepNo: 1,
        name: 'Pranešimas draudikui'
      }, {
        stepNo: 2,
        name: 'Informacija draudikui'
      }, {
        stepNo: 3,
        name: 'Žalos suma'
      }, {
        stepNo: 4,
        name: 'Draudimo išmoka'
      }, {
        stepNo: 5,
        name: 'Bylos uždarymas'
      }
    ],
    fnSetContent: function(isCurrent, idx) {
      var content;

      content = isCurrent ? this.stepsCont1 : this.stepsCont2;
      return this.claim.steps[idx].set('content', content[idx].replace('####', this.stepVal[idx]));
    },
    setSteps: function() {
      var claim, fnGetContent, reached, s, s1, s2, sConfirm, sTemp, sVal, today;

      claim = this.claim;
      today = oGLOBAL.date.getTodayString();
      this.set('stepVal', [today, today, claim.lossAmount, claim.insuranceClaimAmount, '']);
      sTemp = this.stepsTemp;
      s1 = this.stepsCont1;
      s2 = this.stepsCont2;
      sConfirm = this.stepsConfirm;
      s = [];
      sVal = this.stepVal;
      reached = false;
      fnGetContent = function(cnt, idx) {
        return cnt[idx].replace("####", sVal[idx]);
      };
      sTemp.forEach(function(item) {
        var idx, step;

        step = $.extend({}, item);
        idx = item.stepNo - 1;
        if (claim.claimStatus + 1 === step.stepNo) {
          step.step = 'current';
          reached = true;
          step.content = fnGetContent(s1, idx);
        } else {
          if (reached) {
            step.step = 'pending';
          } else {
            step.step = 'completed';
            step.content = claim.claimStatus === step.stepNo ? fnGetContent(s2, idx) : fnGetContent(s2, idx).replace('<a href="#">Atšaukti</a>', '');
          }
        }
        return s.pushObject(Em.Object.create(step));
      });
      return claim.steps = s;
    },
    fnStepForward: function(idx) {
      var dF, newHtml, newStepNo, s, stepVal;

      s = this.claim.steps;
      stepVal = this.stepVal;
      newStepNo = idx + 1;
      s[idx].set('step', 'completed');
      s[idx].set('content', this.stepsCont2[idx].replace('####', stepVal[idx]));
      if (s.length !== newStepNo) {
        s[newStepNo].set('step', 'current');
        s[idx + 1].set('content', this.stepsCont1[newStepNo].replace('####', stepVal[newStepNo]));
      }
      if (idx - 1 > 0) {
        newHtml = this.stepsCont2[idx - 1].replace('####', stepVal[idx - 1]).replace('<a href="#">Atšaukti</a>', '');
        s[idx - 1].set('content', newHtml);
      }
      dF = {
        Data: [newStepNo],
        Fields: ['claimStatus']
      };
      if (newStepNo === 1) {
        dF.Fields.push("DateNotification");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 2) {
        dF.Fields.push("DateDocsSent");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 3) {
        dF.Fields.push("LossAmount");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 4) {
        dF.Fields.push("InsuranceClaimAmount");
        dF.Data.push(stepVal[idx]);
      }
      return this.fnSaveData(dF);
    },
    fnConfirm: function(stepBox, idx) {
      var newHtml;

      newHtml = '<div class="step-box-addon"><div class="inner">' + (this.stepsConfirm[idx].replace("####", this.stepVal[idx])) + '</div></div>';
      return $(newHtml).appendTo(stepBox).hide().slideDown('slow', function() {
        return $(this).css('overflow', 'visible');
      });
    },
    fnStepBack: function(idx) {
      var dF, s;

      s = this.claim.steps;
      s[idx].set('step', 'current');
      s[idx].set('content', this.stepsCont1[idx].replace('####', this.stepVal[idx]));
      if (idx + 1 < 5) {
        s[idx + 1].set('step', 'pending');
        s[idx + 1].set('content', '');
      }
      if (idx - 1 > 0) {
        s[idx - 1].set('content', this.stepsCont2[idx - 1].replace('####', this.stepVal[idx - 1]));
      }
      dF = {
        Data: [idx],
        Fields: ['claimStatus']
      };
      return this.fnSaveData(dF);
    },
    fnSaveData: function(dataAndFields) {
      var DataToSave;

      DataToSave = $.extend({
        "id": this.claim.iD,
        "DataTable": "tblClaims"
      }, dataAndFields);
      return SERVER.update2({
        Action: 'Edit',
        DataToSave: DataToSave,
        Ctrl: $("#claimsSteps"),
        source: "tblClaims",
        row: this.claim,
        CallBackAfter: function(Row) {
          return console.log(Row);
        }
      });
    }
  });

  App.ActionMainView = Em.View.extend({
    viewName: "actionMain",
    templateName: 'tmpActionMain',
    controller: App.actionViewController
  });

  App.actionViewController = Em.ObjectController.create({
    parentView: {},
    init: function() {},
    title: "",
    childViewName: "",
    userData: {},
    goToOtherView: function(e) {
      var p;

      p = $(e.target).data("ctrl");
      this.set("title", p.title).set("childViewName", "view_" + p.view);
      this.parentView.set("actionView", this.view_wrapper).rerender();
      return Em.run.next(function() {
        $("#contentOfClaimReg").find("div.row").find("div.ExtendIt:first").data("ctrl").Value = oDATA.GET("userData").emData[0].userID;
        return oCONTROLS.UpdatableForm({
          frm: "#contentOfClaimReg"
        });
      });
    },
    saveForm: function(e) {
      return alert("saveForm");
    },
    cancelForm: function(e) {
      return this.parentView.set("actionView", App.ActionMainView).rerender();
    },
    view_wrapper: Em.View.extend({
      init: function() {
        var ctrl;

        this._super();
        ctrl = App.actionViewController;
        return this.set("childView", this[ctrl.childViewName]).set("title", ctrl.title);
      },
      childView: {},
      childViewName: "",
      viewName: "actionWrapper",
      templateName: 'tmpActionWrapper',
      view_sendEmail: Em.View.extend({
        viewName: "action_sendEmail",
        templateName: 'tmpAction_sendEmail'
      }),
      view_addEmail: Em.View.extend({
        viewName: "action_addEmail",
        templateName: 'tmpAction_addEmail'
      }),
      view_meeting: Em.View.extend({
        viewName: "action_meeting",
        templateName: 'tmpAction_meeting'
      }),
      view_note: Em.View.extend({
        viewName: "action_note",
        templateName: 'tmpAction_note'
      }),
      view_phone: Em.View.extend({
        viewName: "action_phone",
        templateName: 'tmpAction_phone'
      }),
      view_task: Em.View.extend({
        viewName: "action_task",
        templateName: 'tmpAction_task'
      }),
      view_addCompensation: Em.View.extend({
        viewName: "addCompensation",
        templateName: 'tmpAddCompensation'
      }),
      view_addInsuranceBenefit: Em.View.extend({
        viewName: "addInsuranceBenefit",
        templateName: 'tmpAddInsuranceBenefit'
      }),
      view_addInvoice: Em.View.extend({
        viewName: "addInvoice",
        templateName: 'tmpAddInvoice'
      }),
      view_addPropReport: Em.View.extend({
        viewName: "addPropReport",
        templateName: 'tmpAddPropReport'
      })
    })
  });

  App.TabClaimsRegulationView = Ember.View.extend(App.HidePreviousWindow, {
    viewName: "tabClaimsRegulation",
    previuosWindow: '#divClaimsList',
    thisWindow: '#divClaimRegulation',
    init: function() {
      this._super();
      this.controller.setSteps();
      return App.actionViewController.set("parentView", this);
    },
    actionView: App.ActionMainView,
    templateName: 'tmpClaimRegulation',
    didInsertElement: function() {
      var ctrl, idx, me, stepBox;

      this._super();
      me = this;
      idx = 0;
      ctrl = me.controller;
      stepBox = {};
      this.$().find("#claimsSteps").on('click', 'a', function(e) {
        var classes, stepNo, steps;

        stepBox = $(this).closest("div.step-box");
        classes = stepBox.attr("class");
        stepNo = stepBox.data("stepno");
        idx = stepNo - 1;
        steps = ctrl.claim.steps;
        if (classes.indexOf("completed") > 0) {
          ctrl.fnStepBack(idx);
        } else if (classes.indexOf("current") > 0) {
          if (stepNo === 1) {
            ctrl.fnStepForward(idx);
          } else if (stepNo === 5) {
            ctrl.fnStepForward(idx);
          } else {
            ctrl.fnConfirm(stepBox, idx);
            if (stepNo === 2) {
              Em.run.next(this, function() {
                return stepBox.find("input.date").ValidateOnBlur({
                  Allow: 'Date'
                }).datepicker();
              });
            }
          }
        }
        return false;
      }).on('click', 'button', function(e) {
        var stepVal;

        if (idx === 1) {
          stepVal = stepBox.find("input.date").val();
          ctrl.stepVal[idx] = stepVal;
        }
        ctrl.fnStepForward(idx);
        stepBox.find("div.step-box-addon").slideUp('slow').remove();
        return false;
      });
      return $("#claimRegulationTab").tabs().on("tabsactivate", function(event, ui) {
        if (ui.newTab.index() === 1) {
          return console.log("first");
        }
      });
    },
    controller: App.tabClaimsRegulationController
  });

  /*
  MY.tabAccidents={}
  MY.tabAccidents.SelectedClaimView = App.SelectedClaimView.create(
  	rowContext: { Claims2: d.Claims2, newClaim: false, LossAmount: d.loss, InsuranceType: d.type, accidentID: d.accidentID, accidentDate: d.accidentDate }
  	elementId: "ClaimDetailsContent", contentBinding: 'App.claimEditController.content'
  )
  tr.addClass("selectedClaim title").after("<tr><td id='ClaimWraper' colspan='7' class='selectedClaim content'></td></tr>");
  MY.tabAccidents.SelectedClaimView.appendTo("#ClaimWraper");
  tr = $(e.target).closest("tr");ClaimW = $("#ClaimWraper")
  if (ClaimW.length > 0)
  	MY.tabAccidents.SelectedClaimView.remove()
  	ClaimW.remove();
  */


}).call(this);

/*
//@ sourceMappingURL=tabClaimsRegulation.map
*/
