// Generated by CoffeeScript 1.6.2
(function() {
  var w=window, App=w.App, Em=w.Em, oGLOBAL=w.oGLOBAL, oDATA=w.oDATA, oCONTROLS=w.oCONTROLS, MY=w.MY;
  var ACTIVITYVIEW, DOCSVIEW, docsViewOpts;

  ACTIVITYVIEW = {};

  DOCSVIEW = {};

  App.tabClaimsRegulationController = Em.ArrayController.create({
    init: function() {
      var me;

      this._super();
      return me = this;
    },
    stepsCont1: ['<a href="#">Užregistruokite</a>', '<a href="#">Patvirtinti, kad visa informacija yra pateikta</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę žalos sumą</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę išmokos sumą</a>', '<a href="#">Uždaryti bylą</a>'],
    stepsCont2: ['Draudikui pranešta ####', 'Visa informacija pateikta:</br>####</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė žalos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė išmokos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Byla uždaryta <a href="#"></br>Atidaryti</a>'],
    stepsConfirm: ['', '<p>Įveskite paskutinio dokumento pateikimo datą:</p><input class="date" type="text" value="####"><button class="btn btn-small">Patvirtinti</button><a class="box-1pr-left js-cancel-addon">Atšaukti</a>', '<p>Galutinė žalos dydžio suma - #### Lt.</p><button class="btn btn-small">Patvirtinti</button><a class="box-1pr-left js-cancel-addon">Atšaukti</a>', '<p>Galutinė išmokos dydžio suma - #### Lt</p><button class="btn btn-small">Patvirtinti</button><a class="box-1pr-left js-cancel-addon">Atšaukti</a>', ''],
    stepVal: [],
    stepsTemp: [
      {
        stepNo: 1,
        name: 'Pranešimas draudikui'
      }, {
        stepNo: 2,
        name: 'Informacija draudikui'
      }, {
        stepNo: 3,
        name: 'Žalos suma'
      }, {
        stepNo: 4,
        name: 'Draudimo išmoka'
      }, {
        stepNo: 5,
        name: 'Bylos uždarymas'
      }
    ],
    setSteps: function() {
      var claim, fnGetContent, newSteps, reached, s, s1, s2, sConfirm, sTemp, sVal, stepVal, today;

      claim = this.claim;
      today = oGLOBAL.date.getTodayString();
      stepVal = [today, today, claim.lossAmount, claim.insuranceClaimAmount, ''];
      if (claim.insPolicyID) {
        if (claim.claimStatus > 0) {
          stepVal[0] = claim.dateNotification;
        }
        if (claim.claimStatus > 1) {
          stepVal[1] = claim.dateDocsSent;
        }
      }
      this.set('stepVal', stepVal);
      /*	
      		sTemp=@stepsTemp;
      */

      if (claim.insPolicyID === 0) {
        newSteps = [];
        this.stepsTemp.forEach(function(item, i) {
          if (i === 2 || i === 4) {
            newSteps[i] = item;
            return newSteps[i].stepNo2 = (i === 2 ? 1 : 2);
          }
        });
        sTemp = newSteps;
        if (claim.claimStatus === 0) {
          claim.claimStatus = 2;
        }
      } else {
        sTemp = this.stepsTemp;
      }
      s1 = this.stepsCont1;
      s2 = this.stepsCont2;
      sConfirm = this.stepsConfirm;
      s = [];
      sVal = this.stepVal;
      reached = false;
      fnGetContent = function(cnt, idx) {
        return cnt[idx].replace("####", sVal[idx]);
      };
      sTemp.forEach(function(item) {
        var idx, step;

        step = $.extend({}, item);
        idx = item.stepNo - 1;
        if (item.stepNo === 1) {
          step.first = true;
        }
        if (claim.claimStatus + 1 === step.stepNo) {
          step.step = 'current';
          reached = true;
          step.content = fnGetContent(s1, idx);
        } else {
          if (reached) {
            step.step = 'pending';
          } else {
            step.step = 'completed';
            step.content = claim.claimStatus === step.stepNo ? fnGetContent(s2, idx) : fnGetContent(s2, idx).replace('<a href="#">Atšaukti</a>', '');
          }
        }
        s.pushObject(Em.Object.create(step));
        return false;
      });
      claim.set('steps', s);
      return this;
    },
    fnUpdateStep: function(step, status, stepCont, contentType) {
      var content, idx;

      content = "";
      if (step) {
        idx = step.stepNo - 1;
        if (stepCont) {
          content = this[stepCont][idx].replace('####', this.stepVal[idx]);
        }
        if (contentType === "noCancel") {
          content = content.replace('<a href="#">Atšaukti</a>', '');
        }
        if (status) {
          step.set('step', status);
        }
        step.set('content', content);
        return false;
      }
    },
    fnGetSteps: function(stepNo) {
      var currNo, currStep, max, min, nextStep, prevStep, s;

      s = this.claim.steps;
      currStep = s.findProperty("stepNo", stepNo);
      min = 100;
      max = 0;
      currNo = currStep.stepNo;
      nextStep = null;
      prevStep = null;
      s.forEach(function(step) {
        stepNo = step.stepNo;
        if (stepNo > currNo && stepNo < min) {
          nextStep = step;
          min = step.stepNo;
        }
        if (stepNo < currNo && stepNo > max) {
          prevStep = step;
          return max = step.stepNo;
        }
      });
      return {
        currStep: currStep,
        prevStep: prevStep,
        nextStep: nextStep
      };
    },
    fnStepForward: function(stepNo) {
      var addField, dF, dateInput, fn, idx, s, stepVal, updAccidents;

      if (this.claim.claimStatus === 0) {
        this.replaceActivityView(this.activityTypes.findProperty("name", "activity_notifyInsurer"));
        return false;
      }
      stepVal = this.stepVal;
      s = this.fnGetSteps(stepNo);
      idx = stepNo - 1;
      dateInput = $("#claimsSteps").find(".step-box-addon").find("input.date");
      if (dateInput.length) {
        if (dateInput.data("notValid")) {
          return false;
        }
        stepVal[1] = val;
      }
      fn = this.fnUpdateStep;
      fn.call(this, s.currStep, 'completed', 'stepsCont2', 'cancel');
      fn.call(this, s.nextStep, 'current', 'stepsCont1', 'cancel');
      fn.call(this, s.prevStep, '', 'stepsCont2', 'noCancel');
      dF = {
        Data: [stepNo],
        Fields: ['claimStatus']
      };
      addField = "";
      updAccidents = false;
      switch (stepNo) {
        case 1:
          addField = "DateNotification";
          break;
        case 2:
          addField = "DateDocsSent";
          break;
        case 3:
          addField = "LossAmount";
          updAccidents = true;
          break;
        case 4:
          addField = "InsuranceClaimAmount";
          updAccidents = true;
      }
      if (addField) {
        dF.Fields.push(addField);
        dF.Data.push(stepVal[idx]);
      }
      return this.fnSaveData(dF, updAccidents);
    },
    fnConfirm: function(stepBox, stepNo) {
      var newHtml;

      if (stepBox.find("div.step-box-addon").length) {
        return false;
      }
      newHtml = '<div class="step-box-addon"><div class="inner">' + (this.stepsConfirm[stepNo - 1].replace("####", this.stepVal[stepNo - 1])) + '</div></div>';
      return $(newHtml).appendTo(stepBox).hide().slideDown('slow', function() {
        return $(this).css('overflow', 'visible');
      });
    },
    fnStepBack: function(stepNo) {
      var dF, fn, s;

      s = this.fnGetSteps(stepNo);
      fn = this.fnUpdateStep;
      fn.call(this, s.currStep, 'current', 'stepsCont1', 'cancel');
      fn.call(this, s.nextStep, 'pending', '', 'cancel');
      fn.call(this, s.prevStep, '', 'stepsCont2', 'cancel');
      dF = {
        Data: [stepNo - 1],
        Fields: ['claimStatus']
      };
      return this.fnSaveData(dF);
    },
    fnSaveData: function(dF, updAccidents) {
      var CallBack, DataToSave;

      updAccidents = updAccidents;
      DataToSave = $.extend({
        "id": this.claim.iD,
        "DataTable": "tblClaims",
        Ext: this.claim.accidentID
      }, dF);
      CallBack = null;
      if (updAccidents) {
        CallBack = {
          Success: App.claimEditController.fnUpdateAccident
        };
      }
      SERVER.update2({
        Action: 'Edit',
        DataToSave: DataToSave,
        CallBack: CallBack,
        Ctrl: $("#claimsSteps"),
        source: "proc_Claims",
        row: this.claim,
        CallBackAfter: function(Row, Action, resp) {
          if (updAccidents) {
            return App.claimEditController.fnUpdateAccident(resp);
          }
        }
      });
      /*	
      		@fnclaimStatusChanged()
      		opt= Action: "Edit", DataToSave: DataToSave, CallBack: {Success: App.claimEditController.fnUpdateAccident} 
      		SERVER.update(opt)
      */

      return this.claimStatusBefore = this.claim.claimStatus;
    },
    target: (function() {
      return this;
    }).property(),
    damageSum: 0,
    insurerSum: 0,
    compensationSum: 0,
    activitiesTbl: [],
    finDamageTbl: [],
    finInsurerTbl: [],
    finOtherPartyTbl: [],
    fnSum: function(arr) {
      var sum;

      sum = 0;
      arr.forEach(function(item) {
        return sum += item.amount;
      });
      return sum.toRound();
    },
    fnclaimStatusChanged: (function() {
      var DataToSave, cl, opt;

      if (this.claim.claimStatus > 2 || this.claimStatusBefore > 2) {
        cl = this.claim;
        DataToSave = {
          DataTable: "tblClaims",
          Ext: cl.accidentID,
          id: cl.iD,
          Fields: ["ClaimStatus"],
          Data: [cl.claimStatus]
        };
        if (cl.claimStatus === 3) {
          DataToSave.Fields.push("lossAmount");
          DataToSave.Data.push(cl.lossAmount);
        }
        if (cl.claimStatus === 4) {
          DataToSave.Fields.push("insuranceClaimAmount");
          DataToSave.Data.push(cl.insuranceClaimAmount);
        }
        opt = {
          Action: "Edit",
          DataToSave: DataToSave,
          CallBack: {
            Success: App.claimEditController.fnUpdateAccident
          }
        };
        SERVER.update(opt);
        return this.claimStatusBefore = this.claim.claimStatus;
      }
    }),
    finDamageChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = this.fnSum(this.finDamageTbl);
        this.set('damageSum', sum);
        this.stepVal[2] = sum;
        if (this.claim.claimStatus < 3) {
          this.claim.set("lossAmount", sum);
          if (this.claim.claimStatus === 2) {
            return this.fnUpdateStep.call(this, this.claim.steps.findProperty("step", "current"), '', 'stepsCont1', 'cancel');
          }
        }
      });
    }).observes('finDamageTbl.@each'),
    finInsurerChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = this.fnSum(this.finInsurerTbl);
        this.set('insurerSum', sum);
        this.stepVal[3] = sum;
        if (this.claim.claimStatus < 4) {
          this.claim.set("insuranceClaimAmount", sum);
          if (this.claim.claimStatus === 3) {
            return this.fnUpdateStep.call(this, this.claim.steps.findProperty("step", "current"), '', 'stepsCont1', 'cancel');
          }
        }
      });
    }).observes('finInsurerTbl.@each'),
    finOtherPartyChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = 0;
        this.finOtherPartyTbl.forEach(function(item) {
          return sum += item.amount;
        });
        return this.set('compensationSum', sum.toRound());
      });
    }).observes('finOtherPartyTbl.@each'),
    setActivitiesTables: function(newDocNo) {
      var activities, activitiesTbl, activityTypes, claimID, clickActivityID, me;

      this.set("finDamageTbl", []).set("finInsurerTbl", []).set("finOtherPartyTbl", []);
      claimID = this.claim.iD;
      console.log("Showing all activities Claim iD: " + claimID);
      activities = this.activities;
      activityTypes = this.activityTypes;
      if (newDocNo) {
        activities.findProperty("iD", newDocNo.iD).set("docs", "(" + newDocNo.docNo + ")");
      }
      activities = activities.filter(function(item) {
        return item.claimID === claimID;
      });
      me = this;
      activitiesTbl = [];
      clickActivityID = App.tabClaimsRegulationController.clickActivityID;
      activities.forEach(function(item) {
        var rec, type;

        type = activityTypes.findProperty("typeID", item.typeID);
        rec = me.fnMapActivitiesRecord(item, type);
        if (clickActivityID) {
          if (rec.iD === clickActivityID) {
            rec.clickMe = "js-clickMe";
          }
        }
        activitiesTbl.push(rec);
        if (type.isFinances) {
          switch (type.tmp) {
            case "tmpAddDamageCA":
            case "tmpAddDamageKASKO":
              return me.finDamageTbl.addObject(me.fnMapDamageRecord(item, type.typeTitle));
            case "tmpAddInsuranceBenefit":
              return me.finInsurerTbl.addObject(me.fnMapRefundRecord(item));
            case "tmpAddCompensation":
              return me.finOtherPartyTbl.addObject(me.fnMapRefundRecord(item));
            default:
              return console.error('checkTmp in tblActivities');
          }
        }
      });
      return me.set("activitiesTbl", activitiesTbl);
    },
    users: null,
    fnGetUser: function(userID) {
      var u;

      u = this.users.find(function(user) {
        return user.iD === userID;
      });
      return u.firstName + " " + u.surname;
    },
    fnGetFrom: function(acts) {
      switch (acts.typeID) {
        case 3:
        case 6:
          return this.fnGetUser(acts.fromID);
        case 4:
        case 5:
          return acts.fromText;
      }
    },
    fnGetTo: function(acts) {
      switch (acts.typeID) {
        case 3:
          return this.fnGetUser(acts.toID);
        case 4:
        case 5:
          return acts.toText;
        default:
          return "";
      }
    },
    fnMapDamageRecord: function(a, typeTitle) {
      return Em.Object.create({
        iD: a.iD,
        amount: a.amount,
        docType: typeTitle,
        subject: a.subject,
        body: a.body,
        docs: a.docs,
        typeID: a.typeID,
        userID: a.userID,
        userName: this.fnGetUser(a.userID),
        entryDate: a.entryDate
      });
    },
    fnMapRefundRecord: function(a) {
      return Em.Object.create({
        iD: a.iD,
        amount: a.amount,
        date: a.date,
        body: a.body,
        docs: a.docs,
        typeID: a.typeID,
        userID: a.userID,
        userName: this.fnGetUser(a.userID),
        entryDate: a.entryDate
      });
    },
    fnMapActivitiesRecord: function(acts, type) {
      var from, subject;

      subject = acts.typeID === 6 ? acts.body : acts.subject;
      from = this.fnGetFrom(acts);
      return Em.Object.create({
        iD: acts.iD,
        claimID: acts.claimID,
        typeID: acts.typeID,
        body: acts.body,
        date: acts.date,
        entryDate: acts.entryDate,
        from: from,
        fromOnlyTbl: type.isFinances ? (type.typeTitle ? type.typeTitle : type.title) : from,
        subject: subject,
        amount: acts.amount,
        infoOnlyTbl: type.isFinances ? (subject ? subject + ", " : '') + acts.amount + " Lt" : (subject.length > 25 ? subject.slice(0, 25) + " [...]" : subject),
        userID: acts.userID,
        userName: this.fnGetUser(acts.userID),
        icon: type.icon ? type.icon : '',
        to: this.fnGetTo(acts),
        docs: acts.docs,
        toID: acts.toID,
        fromText: acts.fromText,
        toText: acts.toText
      });
    },
    actViewZone: "#actionsEnterOfClaimReg",
    frm: "#contentOfClaimReg",
    typeID: "",
    goToOtherView: function(e) {
      var p;

      if (e.target.tagName.toUpperCase() !== 'A') {
        $(e.target).closest('tr').addClass('selected').siblings().removeClass('selected');
      }
      p = $.extend(e.context, {
        claim: this.claim
      });
      return this.replaceActivityView(p);
    },
    replaceActivityView: function(p) {
      var actView, scroll;

      scroll = $(window).scrollTop();
      actView = $(this.actViewZone);
      if (actView.length > 0) {
        if (actView.html().length > 0) {
          ACTIVITYVIEW.remove();
          actView.empty();
        }
      }
      if (p) {
        ACTIVITYVIEW = this.actionView.create(p);
      } else {
        ACTIVITYVIEW = this.mainView.create({
          controller: this
        });
      }
      ACTIVITYVIEW.appendTo(this.actViewZone);
      return Em.run.next(scroll, function() {
        return $(window).scrollTop(this);
      });
    },
    editForm: function(e) {
      var frm;

      frm = $(e.target).closest(".inputForm");
      this.actionViewInstance.set("notEditable", false).set("editButton", false);
      return Em.run.next(this, function() {
        return oCONTROLS.UpdatableForm({
          frm: frm,
          btnSaveToDisable: frm.find("button.btnSave")
        });
      });
    },
    deleteForm: function(e) {
      var cnt, frm, frmOpt, me;

      cnt = e.context;
      frm = $(this.frm);
      frmOpt = frm.data("ctrl");
      me = this;
      return oCONTROLS.dialog.Confirm({
        title: "Veiksmas '" + cnt.title + "'",
        msg: "Ištrinti šį veiksmą'?"
      }, function() {
        return SERVER.update2({
          Action: "Delete",
          DataToSave: {
            id: cnt.iD,
            DataTable: frmOpt.tblUpdate
          },
          "Ctrl": frm,
          "source": frmOpt.Source,
          CallBackAfter: function(Row) {
            var obj;

            switch (cnt.tmp) {
              case "tmpAddDamageCA":
              case "tmpAddDamageKASKO":
                obj = "finDamageTbl";
                break;
              case "tmpAddInsuranceBenefit":
                obj = "finInsurerTbl";
                break;
              case "tmpAddCompensation":
                obj = "finOtherPartyTbl";
            }
            (function(obj, objActivities) {
              var r, r2;

              if (obj) {
                r = obj.findProperty("iD", this.iD);
                obj.removeObject(r);
              }
              r2 = objActivities.findProperty("iD", this.iD);
              return objActivities.removeObject(r2);
            }).call(cnt, me[obj], me["activitiesTbl"]);
            return me.cancelForm();
          }
        });
      });
    },
    saveForm: function(e) {
      var Action, CallBackAfter, ClaimID, DataToSave, addData, context, execOnSuccess, form, formOpts, me;

      form = $(this.frm);
      context = e.view.bindingContext;
      execOnSuccess = e.execOnSuccess;
      formOpts = form.data('ctrl');
      me = this;
      addData = {};
      Action = formOpts.NewRec ? "Add" : "Edit";
      if (Action === "Add") {
        ClaimID = this.claim.iD;
        addData = {
          Fields: ["ClaimID"],
          Data: [ClaimID]
        };
        if (context.isFinances) {
          if (context.tmp.slice(0, 12) !== "tmpAddDamage") {
            addData.Fields.push("TypeID");
            addData.Data.push(context.typeID);
          }
        } else {
          addData.Fields.push("TypeID", "FromID");
          addData.Data.push(context.typeID, oDATA.GET("userData").emData[0].userID);
        }
      }
      DataToSave = oCONTROLS.ValidateForm(form, addData);
      if (!DataToSave && e.isTrigger) {
        oCONTROLS.dialog.Alert({
          title: 'Veiksmo išsaugojimas',
          msg: 'Užpildykite pažymėtus laukus..'
        });
      }
      if (DataToSave) {
        CallBackAfter = function(Row, Action, resp, updData) {
          if (Row.typeID === 14) {
            me.claim.claimStatus = 1;
            me.stepVal[0] = Row.date.replace(":00", "");
            me.fnStepForward(1);
          }
          if (execOnSuccess) {
            execOnSuccess(Row, form);
          } else {
            me.cancelForm();
          }
          return me.setActivitiesTables();
        };
        return SERVER.update2({
          Action: Action,
          DataToSave: DataToSave,
          Ctrl: form,
          source: formOpts.Source,
          CallBackAfter: CallBackAfter
        });
      }
    },
    cancelForm: function() {
      this.replaceActivityView();
      $("div.validity-tooltip").remove();
      return this;
    },
    mainView: Em.View.extend({
      addDamage: {},
      addBenefit: {},
      addCompensation: {},
      init: function() {
        var claimTypeID, compName, compTxt, ctrl, fnGetProperties, tmpName, types;

        this._super();
        ctrl = App.tabClaimsRegulationController;
        claimTypeID = ctrl.claim.claimTypeID;
        types = ctrl.activityTypes;
        fnGetProperties = function(propName, propFilter) {
          var props;

          props = types.findProperty(propName, propFilter);
          if (!props.title) {
            props.title = props.typeTitle;
          }
          return $.parseJSON(JSON.stringify(props));
        };
        tmpName = claimTypeID === 1 ? "tmpAddDamageKASKO" : "tmpAddDamageCA";
        this.addDamage = $.extend({
          txt: "Įvesti žalos sumą"
        }, fnGetProperties("tmp", tmpName));
        this.addBenefit = $.extend({
          txt: "Įvesti draudimo išmoką"
        }, fnGetProperties("tmp", "tmpAddInsuranceBenefit"));
        this.addBenefit.title += " (" + this.controller.claim.insPolicy.insurerName + ")";
        compName = claimTypeID === 1 ? "finances_compensationFrom" : "finances_compensationTo";
        compTxt = claimTypeID === 1 ? "Įvesti kaltininko kompensaciją" : "Įvesti kompensaciją nukentėjusiam";
        return this.addCompensation = $.extend({
          txt: compTxt
        }, fnGetProperties("name", compName));
      },
      controller: App.tabClaimsRegulationController,
      templateName: 'tmpActionMain'
    }),
    taskComplete: false,
    notActionOwner: true,
    actionViewContext: null,
    fnTaskComplete: (function(e) {
      var cnt, frm, frmOpt, me, newVal, taskComplete;

      taskComplete = this.get('taskComplete');
      newVal = (taskComplete ? 1 : 0);
      me = this;
      cnt = this.actionViewContext;
      frm = $(this.frm);
      frmOpt = frm.data("ctrl");
      SERVER.update2({
        Action: "Edit",
        DataToSave: {
          id: cnt.iD,
          Data: [newVal],
          Fields: ["Amount"],
          DataTable: frmOpt.tblUpdate
        },
        "Ctrl": frm,
        "source": frmOpt.Source,
        CallBackAfter: function(Row) {
          me.activitiesTbl.findProperty('iD', cnt.iD).set('amount', newVal);
          return false;
        }
      });
      console.log('------------------------------------');
      console.log('fnTaskComplete. newVal set: ' + newVal);
      return console.log('------------------------------------');
    }).observes("taskComplete"),
    actionViewInstance: {},
    actionView: Em.View.extend({
      isNew: true,
      deleteButton: false,
      editButton: false,
      notEditable: false,
      init: function() {
        var ctrl, u;

        this._super();
        ctrl = App.tabClaimsRegulationController;
        ctrl.actionViewInstance = this;
        if (!this.tmp) {
          $.extend(this, {
            isNew: false
          }, $.parseJSON(JSON.stringify(ctrl.activityTypes.findProperty("typeID", this.typeID))));
          u = oDATA.GET("userData").emData[0];
          this.set("deleteButton", true);
          if (!this.isFinances) {
            this.set("notEditable", true);
            if (u.userID === this.userID || ctrl.users.findProperty("iD", u.userID).isAdmin) {
              this.set("editButton", true);
            }
            ctrl.set("notActionOwner", this.editButton || u.userID === this.toID ? false : true);
            ctrl.taskComplete = (this.amount === 0 ? false : true);
            console.log('init. taskComplete val: ' + ctrl.taskComplete);
            console.log('init. cnt.amount: ' + this.amount);
          }
        }
        if (!this.title) {
          this.title = this.typeTitle;
        }
        this.set("childView", Em.View.extend({
          templateName: this.tmp
        }));
        return ctrl.set("actionViewContext", this);
      },
      didInsertElement: function() {
        var claim, divExt, frm, me, user;

        this._super();
        frm = $(this.frm);
        claim = this.claim;
        me = this;
        if (this.isNew) {
          switch (this.typeID) {
            case 3:
            case 4:
            case 5:
              divExt = frm.find("div.row").find("div.ExtendIt:first");
              user = oDATA.GET("userData").emData[0];
              /*
              						if @typeID==3 then divExt.data("ctrl").Value=user.userID #Task
              						else Em.run.next({divExt:divExt,user:user}, ()-> @divExt.find("input").val(@user.userName))
              */

              break;
            default:
              console.log("loaded view");
          }
        } else {
          (function(iD) {
            this.NewRec = 0;
            return this.id = iD;
          }).call(frm.data("ctrl"), this.iD);
        }
        oCONTROLS.UpdatableForm({
          frm: this.frm
        }, (this.notEditable ? false : {
          btnSaveToDisable: frm.find("button.btnSave")
        }));
        if (!this.isNew) {
          return this.makeAttach(this, frm, claim);
        } else {
          return $('<div class="row fileupload-buttonbar box_2pr"><center><i class="img16-attach"></i><a class="fileinput-button">Išsaugoti ir prisegti dokumentus</a></center></div>').appendTo(this.uploadZone).find('a').on("click", function(e) {
            e.preventDefault();
            return $("#contentOfClaimReg").find("button.btnSave").trigger({
              type: "click",
              execOnSuccess: function(row, frm) {
                oCONTROLS.UpdatableForm_toSaved(row.iD, frm);
                $(me.uploadZone).empty();
                return Em.run.next(me, function() {
                  return me.makeAttach(row, frm, claim);
                });
              }
            });
          });
        }
      },
      makeAttach: function(row, frm, claim) {
        var categoryOpts, tblProps;

        categoryOpts = {
          accident: {
            iD: claim.accidentID,
            title: "Įvykio dokumentai"
          },
          driver: {
            iD: claim.accident.driverID,
            title: "Vairuotojo '" + claim.accident.driver + "' dokumentai"
          },
          vehicles: [
            {
              iD: claim.vehicleID,
              title: "TP " + claim.vehicle.make + " " + claim.vehicle.model + ", " + claim.vehicle.plate
            }
          ]
        };
        tblProps = {
          Fields: ["ActivityID", "DocID"],
          Data: [row.iD]
        };
        switch (frm.data("ctrl").tblUpdate) {
          case "tblFinances":
            tblProps.DataTable = "tblDocsInFin";
            break;
          case "tblActivities":
            tblProps.DataTable = "tblDocsInActivity";
            break;
          default:
            console.error('no such tbl');
        }
        $(this.uploadZone).UploadFiles({
          categoryOpts: categoryOpts,
          showFromAccident: true,
          requireCategory: true,
          docsController: "claimDocController",
          updateRelationsTbl: tblProps,
          claim: this.claim
        });
        App.claimDocController.setDocs(tblProps.DataTable, row.iD);
        if (!$.isEmptyObject(DOCSVIEW)) {
          DOCSVIEW.remove();
          DOCSVIEW.destroy();
        }
        return DOCSVIEW = Em.View.create({
          opts: null,
          templateName: "tmpDocsView",
          tagName: "ul",
          classNames: ["gallery", "ui-helper-reset", "ui-helper-clearfix"],
          controller: App.claimDocController,
          didInsertElement: function() {
            this._super();
            return this.$().data("opts", this.opts);
          }
        }).appendTo(this.uploadZone);
      },
      templateName: 'tmpActionWrapper',
      frm: "#contentOfClaimReg",
      uploadZone: "#uploadClaimDocs"
    }),
    goToList: function() {
      return App.router.transitionTo('claimList');
    }
  });

  App.TabClaimsRegulationView = Ember.View.extend({
    init: function() {
      this._super();
      if (!$.isEmptyObject(ACTIVITYVIEW)) {
        ACTIVITYVIEW.remove();
        ACTIVITYVIEW.destroy();
      }
      this.controller.setActivitiesTables();
      return this.controller.setSteps();
    },
    templateName: 'tmpClaimRegulation',
    didInsertElement: function() {
      var ctrl, me, stepBox;

      this._super();
      ctrl = this.controller;
      ctrl.cancelForm();
      ctrl.claimStatusBefore = ctrl.claim.claimStatus;
      Em.run.next(this, function() {
        ctrl = App.tabClaimsRegulationController;
        if (ctrl.clickActivityID) {
          this.$().find("table tr.js-clickMe").trigger("click");
          return ctrl.clickActivityID = null;
        }
      });
      me = this;
      stepBox = {};
      this.$().find("#claimsSteps").on('click', 'a', function(e) {
        var classes, stepNo, steps;

        stepBox = $(this).closest("div.step-box");
        classes = stepBox.attr("class");
        stepNo = stepBox.data("stepno");
        steps = ctrl.claim.steps;
        if (classes.indexOf("completed") > 0) {
          ctrl.fnStepBack(stepNo);
        } else if (classes.indexOf("current") > 0) {
          if (stepNo === 1 || stepNo === 5) {
            ctrl.fnStepForward(stepNo);
          } else {
            ctrl.fnConfirm(stepBox, stepNo);
            if (stepNo === 2) {
              Em.run.next(this, function() {
                return stepBox.find("input.date").inputControl({
                  type: 'Date',
                  Validity: 'less'
                }).val(oGLOBAL.date.getTodayString()).datepicker({
                  minDate: '-3y',
                  maxDate: "0"
                });
              });
            }
          }
        }
        return false;
      }).on('click', 'button', function(e) {
        var stepNo, stepVal;

        stepNo = $(e.target).closest("div.step-box.current").data("stepno");
        if (stepNo + 1 === 1) {
          stepVal = stepBox.find("input.date").val();
          ctrl.stepVal[stepNo + 1] = stepVal;
        }
        if (ctrl.fnStepForward(stepNo)) {
          stepBox.find("div.step-box-addon").slideUp('slow').remove();
        }
        return false;
      }).on('click', 'a.js-cancel-addon', function(e) {
        stepBox.find("div.step-box-addon").slideUp('slow').remove();
        return false;
      });
      return $("#claimRegulationTab").tabs().on("tabsactivate", function(event, ui) {
        if (ui.newTab.index() === 1) {
          return console.log("first");
        }
      });
    },
    controller: App.tabClaimsRegulationController
  });

  App.claimDocController = Em.ResourceController.create({
    target: (function() {
      return this;
    }).property(),
    relationTbl: null,
    activityID: null,
    docs: [],
    accDoc: [],
    refreshDocs: function() {
      var ctrl;

      this.setDocs(this.relationTbl, this.activityID);
      ctrl = App.tabClaimsRegulationController;
      if (this.relationTbl === "tblDocsInActivity") {
        return ctrl.setActivitiesTables({
          iD: this.activityID,
          docNo: this.docs.length
        });
      } else {
        return ctrl.setFinancesTables({
          iD: this.activityID,
          docNo: this.docs.length
        });
      }
    },
    setDocs: function(relationTbl, activityID) {
      var docTypes, docs, docsPath, fnGetDocType, fnGetIcon, fnGetUser, relTbl, url, users;

      this.relationTbl = relationTbl;
      this.activityID = activityID;
      relTbl = oDATA.GET(relationTbl).emData.filter(function(doc) {
        return doc.activityID === activityID;
      }).map(function(doc) {
        return doc.docID;
      });
      docsPath = oDATA.GET("userData").emData[0].docsPath;
      url = "Uploads/" + docsPath;
      users = oDATA.GET("tblUsers").emData;
      docTypes = oDATA.GET("tblDocTypes").emData;
      fnGetIcon = function(ext) {
        ext = ext.slice(0, 3);
        return "img32-doc_" + (ext === "xls" || ext === "doc" || ext === "pdf" ? ext : "unknown");
      };
      fnGetUser = (function(userID) {
        var u;

        u = users.find(function(user) {
          return user.iD === userID;
        });
        return u.firstName + " " + u.surname;
      });
      fnGetDocType = function(typeID) {
        return docTypes.find(function(type) {
          return type.iD === typeID;
        }).name;
      };
      docs = oDATA.GET("tblDocs").emData.filter(function(doc) {
        return relTbl.contains(doc.iD);
      }).map(function(doc) {
        var file, user;

        user = fnGetUser(doc.userID);
        file = "/" + doc.iD + "." + doc.fileType;
        return Em.Object.create({
          docID: doc.iD,
          hasThumb: doc.hasThumb,
          urlThumb: url + "/Thumbs" + file,
          urlDoc: url + file,
          docType: fnGetDocType(doc.docTypeID),
          description: doc.description,
          docName: doc.docName,
          userName: user,
          fileDate: doc.fileDate,
          fileName: doc.docName + "." + doc.fileType,
          fileIcon: !doc.hasThumb ? fnGetIcon(doc.fileType) : "img32-doc_unknown",
          docDetails: "Įkėlė " + user + " " + doc.fileDate + ", dydis - " + Math.ceil(doc.fileSize / 10000) / 100 + "Mb"
        });
      });
      return this.set("docs", docs);
    },
    fnMapDocs: function(relationTbl, activityID) {
      var docTypes, docsInAccident, docsPath, fnGetDocType, url;

      docTypes = oDATA.GET("tblDocTypes").emData;
      fnGetDocType = function(typeID) {
        return docTypes.find(function(type) {
          return type.iD === typeID;
        }).name;
      };
      docsPath = oDATA.GET("userData").emData[0].docsPath;
      url = "Uploads/" + docsPath;
      docsInAccident = oDATA.GET(relationTbl).emData.filter(function(o) {
        return o.activityID === activityID;
      }).map(function(o) {
        return o.docID;
      });
      this.set("noAccidentDocs", (docsInAccident.length === 0 ? true : false));
      return function(d) {
        var file;

        file = "/" + d.iD + "." + d.fileType;
        return Em.Object.create({
          docID: d.iD,
          hasThumb: d.hasThumb,
          urlThumb: url + "/Thumbs" + file,
          urlDoc: url + file,
          docType: fnGetDocType(d.docTypeID),
          docName: d.docName,
          fileDate: d.fileDate,
          fileName: d.docName + "." + d.fileType,
          isPhoto: (d.groupID === 1 ? true : false),
          added: (docsInAccident.contains(d.iD) ? true : false)
        });
      };
    },
    fnSetGroup: function(vGroup) {
      return function(group, refID, title) {
        vGroup.push({
          groupID: group.iD,
          refID: refID,
          title: (title ? title : group.name),
          items: []
        });
        return false;
      };
    },
    setAccDocs: function(accCats, claim) {
      var fn, fnMapDocs, i, vGroup;

      vGroup = [];
      fn = this.fnSetGroup(vGroup);
      oDATA.GET("tblDocGroup").emData.forEach(function(group) {
        var acc, drv, vehs;

        acc = accCats.accident;
        drv = accCats.driver;
        vehs = accCats.vehicles;
        switch (group.ref) {
          case 1:
          case 2:
            return fn(group, acc.iD);
          case 3:
            return fn(group, drv.iD, drv.title);
          case 4:
            return vehs.forEach(function(veh) {
              return fn(group, veh.iD, veh.title);
            });
          case 5:
            return fn(group, acc.iD);
        }
      });
      i = vGroup.findIndexByKeyValue("groupID", 5);
      if (i < 4) {
        vGroup.move(i, 4);
      }
      fnMapDocs = this.fnMapDocs(this.relationTbl, this.activityID);
      oDATA.GET("tblDocs").emData.forEach(function(d) {
        var gr, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = vGroup.length; _i < _len; _i++) {
          gr = vGroup[_i];
          if (d.groupID === gr.groupID) {
            if (d.refID === gr.refID) {
              gr.items.addObject(fnMapDocs(d));
              break;
            } else if (gr.groupID !== 4) {
              break;
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return this.set("vGroup", vGroup);
    },
    vGroup: []
  });

  docsViewOpts = {
    opts: null,
    templateName: "tmpDocsView",
    tagName: "ul",
    classNames: ["gallery", "ui-helper-reset", "ui-helper-clearfix"],
    controller: App.dialogDocController,
    didInsertElement: function() {
      this._super();
      return this.$().data("opts", this.opts);
    }
  };

  /*
  MY.tabAccidents={}
  MY.tabAccidents.SelectedClaimView = App.SelectedClaimView.create(
  	rowContext: { Claims2: d.Claims2, newClaim: false, LossAmount: d.loss, InsuranceType: d.type, accidentID: d.accidentID, accidentDate: d.accidentDate }
  	elementId: "ClaimDetailsContent", contentBinding: 'App.claimEditController.content'
  )
  tr.addClass("selectedClaim title").after("<tr><td id='ClaimWraper' colspan='7' class='selectedClaim content'></td></tr>");
  MY.tabAccidents.SelectedClaimView.appendTo("#ClaimWraper");
  tr = $(e.target).closest("tr");ClaimW = $("#ClaimWraper")
  if (ClaimW.length > 0)
  	MY.tabAccidents.SelectedClaimView.remove()
  	ClaimW.remove();
  */


}).call(this);

/*
//@ sourceMappingURL=tabClaimsRegulation.map
*/
