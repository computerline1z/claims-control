// Generated by CoffeeScript 1.4.0
(function() {
  var w=window,$ = w.jQuery, App=w.App, Em=w.Em;

  App.create_docsTypesController = function(categoryOpts) {
    return App.docsTypesController = Em.ResourceController.create({
      init: function() {
        var c, catOpts, cats, docTypes, me;
        this._super();
        me = this;
        docTypes = oDATA.GET("tblDocTypes").emData;
        c = [];
        this.set("docTypes", docTypes);
        categoryOpts = categoryOpts ? categoryOpts : this.categoryOpts;
        if (categoryOpts) {
          this.set("categoryOpts", categoryOpts);
          catOpts = categoryOpts;
          cats = oDATA.GET("tblDocGroup").emData;
          if (catOpts.driver) {
            cats.findProperty("iD", 3).set("name", catOpts.driver.title);
          }
          cats.forEach(function(catItem, i) {
            var newItem;
            newItem = {
              categoryId: catItem.iD,
              title: catItem.name
            };
            i = catItem.iD;
            console.log("catItem.iD: " + i + ", catItem.name: " + catItem.name);
            if (i !== 1 && i !== 5) {
              newItem.isTree = "isTree";
            }
            newItem.isGroup = "isGroup";
            if (i !== 4) {
              newItem.isSelectable = true;
            }
            if (i === 4) {
              newItem.items = catOpts.vehicles.map(function(item) {
                return {
                  isGroup: "isGroup",
                  refID: item.iD,
                  categoryId: 4,
                  title: item.title,
                  isTree: "isTree",
                  isSelectable: true
                };
              });
              newItem.items.forEach(function(vehicle) {
                return vehicle.items = me.setDocTypes(docTypes, catItem.iD, vehicle.refID);
              });
            } else {
              newItem.items = me.setDocTypes(docTypes, catItem.iD);
            }
            return c[c.length] = newItem;
          });
          return this.set("content", c);
        }
      },
      setDocTypes: function(docTypes, groupID, refID) {
        fnMap;

        var fnMap;
        if (refID) {
          fnMap = function(item) {
            return {
              categoryId: item.iD,
              title: item.name,
              refID: refID
            };
          };
        } else {
          fnMap = function(item) {
            return {
              categoryId: item.iD,
              title: item.name
            };
          };
        }
        return docTypes.filter(function(type) {
          return type.docGroupID === groupID;
        }).map(fnMap);
      },
      content: [],
      docTypes: [],
      filterTypes: (function() {
        var dt;
        console.log("Start filterTypes fn");
        dt = this.get("docTypes");
        this.set("docTypes_accident", dt.filterProperty("docGroupID", 2));
        this.set("docTypes_driver", dt.filterProperty("docGroupID", 3));
        return this.set("docTypes_vehicle", dt.filterProperty("docGroupID", 4));
      }).observes("docTypes.length")
    });
  };

  $.widget("ui.Tree", {
    options: {
      treeId: "dynamicTree",
      docViewForTreeId: "docViewForTree",
      formTemplate: "tmpUploadForm",
      docsUpdateCallBack: null,
      categoryOpts: {},
      docsTypesController: "docsTypesController",
      TreeDocController: "treeDocController"
    },
    _create: function() {
      $('<table width="100%;"><tr style="vertical-align:top"><td style="width:28em"><div id="' + this.options.treeId + '" style="border-right: 1px solid #ddd;"></div></td>' + '<td style="vertical-align:top;padding:10px;"><div id="' + this.options.docViewForTreeId + '"></div></td></tr></table>').appendTo(this.element);
      if (App.docsTypesController) {
        if (!App.docsTypesController.content.length) {
          App.docsTypesController.set("categoryOpts", this.options.categoryOpts).init();
        }
      } else {
        App.create_docsTypesController(this.options.categoryOpts);
      }
      App.DocTreeView = Em.View.extend(this.DocTreeViewOpt);
      this.TreeViewOpts.opts = this.options;
      this.TreeDocControllerOpts.opts = this.options;
      this.DocTreeViewOpt.opts = this.options;
      App.TreeView = Em.View.extend(this.TreeViewOpts);
      App[this.options.TreeDocController] = Em.Object.create(this.TreeDocControllerOpts);
      Em.View.create({
        templateName: "tmpDocsTree"
      }).appendTo("#" + this.options.treeId);
      this.docViewForTreeOpts.controller = App[this.options.TreeDocController];
      this.docViewForTreeOpts.opts = this.options;
      return Em.View.create(this.docViewForTreeOpts).appendTo("#" + this.options.docViewForTreeId);
    },
    DocTreeViewOpt: {
      templateName: "tmpDocsNodes",
      tagName: "",
      opts: null,
      didInsertElement: function() {
        return $("li.treeItem").droppable({
          accept: "#gallery > li",
          accept: "#" + this.opts.docViewForTreeId + " li",
          over: function(event, dragged) {
            var subbranch, subbranches, targetBranch;
            if (!$(this).hasClass("isTree")) {
              $(this).addClass("treeItemHover");
            }
            subbranches = $("ul", this);
            if (subbranches.size() > 0) {
              subbranch = subbranches.eq(0);
              if (subbranch.css("display") === "none") {
                targetBranch = subbranch.get(0);
                return window.setTimeout((function() {
                  $(targetBranch).show();
                  return $("img.expandImage", targetBranch.parentNode).eq(0).attr("src", "Content/less/images/toggle_minus.png");
                }), 200);
              }
            }
          },
          out: function() {
            return $(this).removeClass("treeItemHover");
          },
          drop: function(event, dropped) {
            var opts, subbranch, textElement;
            $(this).removeClass("treeItemHover");
            subbranch = $("ul", this);
            if (subbranch.size() === 0) {
              textElement = $(this).find("span.textHolder").eq(0);
              opts = $(this).closest("tr").find("td:eq(1) ul").data("opts");
              return App[opts.TreeDocController].deleteDocument(dropped.draggable, this);
            }
          }
        });
      }
    },
    TreeViewOpts: {
      docs: null,
      opts: null,
      templateName: "tmpDocsCategory",
      tagName: "",
      classNames: [],
      getDocs: function(event) {
        var account, ctx, currentDocs, docTypes, fnFilter, fnGetDocType, fnGetIcon, fnGetUser, isPhoto, showDocs, t, url, users;
        App.treeDocController.set("selectedCategoryId", event.view.bindingContext.categoryId);
        $("#" + this.opts.treeId).find("span").removeClass("ui-state-highlight");
        t = $(event.target);
        (t.is("li") ? t.find("span:first") : t.closest("span")).addClass("ui-state-highlight");
        console.log("categoryId: " + event.view.bindingContext.categoryId);
        console.log("context: ");
        console.log(this._context);
        currentDocs = [];
        ctx = this._context;
        fnFilter;

        if (ctx.isGroup) {
          if (ctx.refID) {
            fnFilter = function(doc) {
              return doc.groupID === ctx.categoryId && doc.refID === ctx.refID;
            };
          } else {
            fnFilter = function(doc) {
              return doc.groupID === ctx.categoryId;
            };
          }
        } else {
          if (ctx.refID) {
            fnFilter = function(doc) {
              return doc.docTypeID === ctx.categoryId && doc.refID === ctx.refID;
            };
          } else {
            fnFilter = function(doc) {
              return doc.docTypeID === ctx.categoryId;
            };
          }
        }
        currentDocs = App[this.opts.TreeDocController].AllDocs.filter(fnFilter);
        currentDocs.forEach(function(doc) {
          return console.log("iD: " + doc.iD + ", docName: " + doc.docName + ", docTypeID:" + doc.docTypeID + ", groupID:" + doc.groupID);
        });
        account = oDATA.GET("userData").emData[0].account;
        url = "Uploads/" + account;
        users = oDATA.GET("tblUsers").emData;
        docTypes = oDATA.GET("tblDocTypes").emData;
        fnGetIcon = function(ext) {
          ext = ext.slice(0, 3);
          return "img32-doc_" + (ext === "xls" || ext === "doc" || ext === "pdf" ? ext : "unknown");
        };
        fnGetUser = (function(userID) {
          var u;
          u = users.find(function(user) {
            return user.iD === userID;
          });
          return u.firstName + " " + u.surname;
        });
        fnGetDocType = function(typeID) {
          return docTypes.find(function(type) {
            return type.iD === typeID;
          }).name;
        };
        isPhoto = ctx.isGroup && ctx.categoryId === 1 ? true : false;
        showDocs = currentDocs.map(function(doc) {
          var file, user;
          return Em.Object.create(user = fnGetUser(doc.userID), file = "/" + doc.iD + "." + doc.fileType, {
            docID: doc.iD,
            hasThumb: doc.hasThumb,
            urlThumb: url + "/Thumbs" + file,
            urlDoc: url + file,
            docType: fnGetDocType(doc.docTypeID),
            description: doc.description,
            docName: doc.docName,
            userName: user,
            fileDate: doc.fileDate,
            fileName: doc.docName + "." + doc.fileType,
            fileIcon: !doc.hasThumb ? fnGetIcon(doc.fileType) : "img32-doc_unknown",
            docDetails: isPhoto ? "" : "Įkėlė " + user + " " + doc.fileDate + ", dydis - " + Math.ceil(doc.fileSize / 10000) / 100 + "Mb"
          });
        });
        App[this.opts.TreeDocController].set("isPhoto", isPhoto);
        console.log("showDocs:");
        console.log(showDocs);
        App[this.opts.TreeDocController].set("docs", showDocs);
        return false;
      },
      expandCollapse: function(event) {
        var action, node, subbranch;
        node = event.target;
        if (node.src.indexOf("spacer") === -1) {
          subbranch = $("ul", node.parentNode);
          action = "hide";
          if (subbranch.eq(0).css("display") === "none") {
            action = "show";
          }
          return $(subbranch).each(function() {
            if (action === "show") {
              $(this).show();
              return $(this).parent().find("img.expandImage").attr("src", "Content/less/images/toggle_minus.png");
            } else {
              $(this).hide();
              return $(this).parent().find("img.expandImage").attr("src", "Content/less/images/toggle_plus.png");
            }
          });
        }
      }
    },
    TreeDocControllerOpts: {
      init: function() {
        this._super();
        return this.refreshDocs();
      },
      refreshDocs: function() {
        var cats, docs;
        docs = oDATA.GET("tblDocs").emData;
        cats = this.opts.categoryOpts;
        if (cats.accident) {
          this.AllDocs = docs.filterByTbl({
            filterTbl: oDATA.GET("tblDocsInAccidents").emData,
            joinField: "docID",
            filterField: "accidentID",
            filterValue: cats.accident.iD
          });
        } else {
          this.AllDocs = docs;
        }
        return Em.run.next(this, function() {
          var selected, t;
          if (this.AllDocs.filter(function(doc) {
            return doc.groupID === 5;
          }).length) {
            return $("#" + this.opts.treeId).find("ul>li:last").trigger("click");
          } else {
            t = $("#" + this.opts.treeId);
            selected = t.find("span.ui-state-highlight");
            if (selected.length) {
              return selected.trigger("click");
            } else {
              return t.find("li:first span").trigger("click");
            }
          }
        });
      },
      docs: [],
      opts: null,
      AllDocs: [],
      selectedCategoryId: null,
      deleteDocument: function(docElement, selectedNode) {
        var Data, Fields, doc, docID, docType, isGroup, newGroupID, newTypeName, newdocTypeID, opts, refID, sN;
        sN = $(selectedNode);
        refID = sN.data("ref-id");
        isGroup = sN.hasClass("isGroup");
        docID = docElement.data("doc-id");
        newdocTypeID = $(selectedNode).data("category-id");
        docType = oDATA.GET("tblDocTypes").emData.find(function(types) {
          return types.iD === newdocTypeID;
        });
        newGroupID = docType.docGroupID;
        newTypeName = docType.name;
        if (isGroup) {
          if (newdocTypeID === 1) {
            newGroupID = 1;
            newdocTypeID = 0;
          }
          if (newdocTypeID === 5) {
            newGroupID = 5;
            newdocTypeID = 11;
          }
        }
        console.log("docID:" + docID + ", new type:" + newdocTypeID + ", new group:" + newGroupID);
        Data = new Array(newdocTypeID, newGroupID);
        Fields = new Array("DocTypeID", "GroupID");
        if (refID) {
          Data.push(refID);
          Fields.push("RefID");
        }
        doc = this.AllDocs.findProperty("iD", docID);
        opts = this.opts;
        SERVER.update2({
          "Action": "Edit",
          "Ctrl": $("#" + opts.treeId),
          "source": "tblDocs",
          "row": doc,
          DataToSave: {
            "id": docID,
            "Data": Data,
            "Fields": Fields,
            "DataTable": "tblDocs"
          },
          Msg: {
            Title: "Duokumento tipo priskyrimas",
            Success: "Dokumentas '" + doc.docName + "' priskirtas tipui '" + newTypeName + "'.",
            Error: "Nepavyko pakeisti dokumento '" + doc.docName + "' tipo."
          },
          CallBackAfter: function(Row) {}
        });
        return docElement.fadeOut();
      }
    },
    docViewForTreeOpts: {
      opts: null,
      templateName: "tmpDocsView",
      tagName: "ul",
      classNames: ["gallery", "ui-helper-reset", "ui-helper-clearfix"],
      didInsertElement: function() {
        this.$().data("opts", this.opts);
        this.$().sortable({
          revert: true,
          opacity: 0.2,
          refreshPositions: true
        });
        return this.$().disableSelection();
      }
    }
  });

}).call(this);
