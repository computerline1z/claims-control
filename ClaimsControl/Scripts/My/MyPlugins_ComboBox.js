// Generated by CoffeeScript 1.3.3
(function() {
  ﻿;

  var $ = window.jQuery;

  $.widget("ui.ComboBox", {
    options: {
      ListType: "List",
      Editable: {
        Add: false,
        Edit: false
      },
      iVal: 0,
      iText: [1],
      selectFirst: false,
      Value: ""
    },
    _create: function() {
      var Editable, OptVal, data, fnEditItem, id, input, opt, val;
      input = $(this.element[0]);
      if (input === undefined) {
        alert("Error! Input not found for ComboBox! (MyPlugins_ComboBox:15)");
      }
      opt = $.extend(true, this.options, $(input).data("ctrl"));
      fnEditItem = function(id) {
        return new oGLOBAL.clsEditableForm({
          objData: opt.Source,
          Action: (id ? "Edit" : "Add"),
          aRowData: (id ? oDATA.GetRow(id, opt.Source) : 0),
          CallBackAfter: function(RowData) {
            $(input).data("newval", RowData[opt.iVal]);
            return $(input).val(RowData.MapArrToString(opt.iText));
          }
        });
      };
      Editable = (opt.Editable.Add || opt.Editable.Edit ? true : false);
      data = void 0;
      OptVal = parseInt(opt.Value, 10);
      data = $.map(oDATA.GET(opt.Source).Data, function(a) {
        if (a[0] === OptVal) {
          input.val(a.MapArrToString(opt.iText));
        }
        return {
          id: a[0],
          label: a.MapArrToString(opt.iText)
        };
      });
      if (typeof opt.Append !== "undefined") {
        data[data.length] = opt.Append;
      }
      $(input).data("newval", opt.Value).autocomplete({
        selectFirst: opt.selectFirst,
        delay: 0,
        minLength: (this.options.ListType === "None" ? 2 : 0),
        autoFocus: true,
        source: function(request, response) {
          return response($.ui.autocomplete.filter(data, request.term));
        },
        select: function(event, ui) {
          if (ui.item) {
            if (ui.item.id !== $(this).data("newval")) {
              $(this).data("newval", ui.item.id).val(($(this).data("ctrl").Type === "List" ? ui.item.value : ui.item.label));
              if (opt.fnChangeCallBack) {
                MY.execByName(opt.fnChangeCallBack, MY, this, ui.item);
              }
              return false;
            }
          }
        },
        change: function(event, ui) {
          var t;
          if (!ui.item) {
            if (opt.fnChangeCallBack) {
              MY.execByName(opt.fnChangeCallBack, MY, this, null);
            }
            t = $(this);
            t.data("newval", "");
            if (opt.Tip ? opt.Tip === t.val() : void 0) {
              return true;
            }
            if (opt.Type === "List") {
              t.val("");
            }
            if (typeof input.data("autocomplete") !== "undefined") {
              input.data("autocomplete").term = "";
            }
            t.removeClass("alink");
            return false;
          }
          return $(this).removeClass("inputTip");
        },
        close: function(event, ui) {
          var newVal, t;
          if (opt.Editable.Edit) {
            t = input;
            newVal = t.data("newval");
            if (!t.hasClass("alink") && newVal) {
              t.addClass("alink").unbind("dblclick").bind("dblclick", function() {
                return fnEditItem(newVal);
              });
            } else if (newVal) {
              t.unbind("dblclick").bind("dblclick", function() {
                return fnEditItem(newVal);
              });
            } else {
              if (t.hasClass("alink") && !newVal) {
                t.removeClass("alink").unbind("dblclick");
              }
            }
          }
          input.removeClass("activeField");
          if (opt.fnValueChanged && input.data("newval")) {
            return opt.fnValueChanged(input.data("newval"), input.val());
          }
        },
        open: function() {
          var acData, termTemplate;
          if (!(opt.ListType !== "List" ? input.hasClass("activeField") : void 0)) {
            input.addClass("activeField");
          }
          if (opt.ListType === "None" || opt.ListType === "Combo") {
            acData = $(this).data("autocomplete");
            termTemplate = "<span style=\"color:red\">%s</span>";
            return acData.menu.element.find("a").each(function() {
              var me, regex;
              me = $(this);
              regex = new RegExp(acData.term, "gi");
              return me.html(me.text().replace(regex, function(matched) {
                return termTemplate.replace("%s", matched);
              }));
            });
          }
        }
      });
      if (opt.Editable.Edit) {
        val = input.data("newval");
        if (val) {
          input.addClass("alink").bind("dblclick", function() {
            return fnEditItem((val ? val : 0));
          });
        }
      }
      if (opt.ListType !== "None" || opt.Editable.Add) {
        input.removeClass("ui-corner-all").addClass("ui-corner-left");
      }
      $(".ui-autocomplete-input").live("autocompleteopen", function() {
        var autocomplete, menu;
        autocomplete = $(this).data("autocomplete");
        menu = autocomplete.menu;
        if (!autocomplete.options.selectFirst) {
          return;
        }
        return menu.activate($.Event({
          type: "mouseenter"
        }), menu.element.children().first());
      });
      $(input).data("autocomplete")._renderItem = function(ul, item) {
        return $("<li></li>").data("item.autocomplete", item).append("<a>" + item.value + "</a>").appendTo(ul);
      };
      if (opt.Editable.Add) {
        id = $(this).data("newval");
        id = (id ? id : 0);
        this.addButton({
          title: "Pridėti naują",
          icon: "img18-plus",
          fn: function() {
            return fnEditItem(0);
          },
          NoCorners: false
        }, input);
      }
      if (opt.ListType !== "None") {
        this.addButton({
          title: "Parodyti visus",
          icon: "ui-icon-triangle-1-s",
          fn: function() {
            if (input.autocomplete("widget").is(":visible")) {
              input.autocomplete("close");
              return;
            }
            input.autocomplete("search", "");
            input.focus();
            return false;
          },
          NoCorners: (opt.Editable.Add ? true : false)
        }, input);
      }
      if (opt.ListType === "List") {
        input.attr("readonly", true);
        return input.click(function() {
          if (input.autocomplete("widget").is(":visible")) {
            input.autocomplete("close");
            return false;
          }
          input.autocomplete("search", "");
          input.focus();
          return false;
        });
      } else {
        return input.click(function() {
          return this.select();
        });
      }
    },
    addButton: function(p, input) {
      this.button = $("<button style='margin:0 0 0 -2.2em;height:" + input.outerHeight() + "px;'>&nbsp;</button>").attr("tabIndex", -1).attr("title", p.title).insertAfter(input).button({
        icons: {
          primary: p.icon
        },
        text: false
      }).click(function() {
        p.fn();
        return false;
      }).removeClass("ui-corner-all").addClass("ui-button-icon" + (p.NoCorners ? "" : " ui-corner-right")).find("span.ui-icon");
      if (p.icon === "img18-plus") {
        this.button.removeClass("ui-button-icon-primary ui-icon").css("margin", "-2px 0 0 -8px");
      }
      if ($.browser.mozilla) {
        return this.button.css("margin", "0");
      }
    },
    destroy: function() {
      return $.Widget.prototype.destroy.call(this);
    }
  });

}).call(this);
