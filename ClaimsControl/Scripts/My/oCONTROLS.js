// Generated by CoffeeScript 1.6.3
(function() {
  var App, Em, MY, oDATA, oGLOBAL, w;

  w = window;

  App = w.App;

  Em = w.Em;

  oGLOBAL = w.oGLOBAL;

  oDATA = w.oDATA;

  MY = w.MY;

  w.oCONTROLS = {
    UpdatableForm_reset: function(frm) {
      return $(frm).find(".UpdateField").each(function() {
        var e, eOpt, isList, val;
        e = $(this);
        eOpt = e.data("ctrl");
        isList = (e.data("ctrl").Type === "List" ? true : false);
        val = eOpt.Value;
        if (e.attr("type") === "checkbox") {
          return e.attr("checked", val);
        } else if (e.is("textarea")) {
          return e.html(val);
        } else if (isList) {
          if ($.isNumeric(val)) {
            e.data("newval", val);
            return e.val(oDATA.GET(e.data("ctrl").Source).Data.findColValuesByID(val, eOpt.iText));
          }
        } else {
          return e.val(val);
        }
      });
    },
    UpdatableForm_toSaved: function(RecId, frm, OtherDataToSave) {
      if (OtherDataToSave) {
        SERVER.update({
          Action: "Edit",
          DataToSave: OtherDataToSave
        });
      }
      if (RecId) {
        $.extend(frm.data("ctrl"), {
          NewRec: 0,
          id: RecId
        });
      }
      return frm.find(".UpdateField").each(function() {
        var e, eOpt, val;
        e = $(this);
        eOpt = e.data("ctrl");
        val = void 0;
        if (e.attr("type") === "checkbox") {
          val = (e.attr("checked") ? 1 : 0);
        } else if (e.is("input") && e.data("ctrl").Type === "List") {
          val = e.data("newval");
        } else {
          val = e.val();
        }
        return $.extend(e.data("ctrl"), {
          Value: val
        });
      });
    },
    getValFromRow: function(field, row) {
      var f;
      f = field.slice(0, 1).toLowerCase() + field.slice(1);
      return row[f];
    },
    UpdatableForm: function(p) {
      var btnSaveToDisable, colNames, data, fnEnableSave, frmOpt, me, sTitle;
      sTitle = "";
      frmOpt = $(p.frm).data("ctrl");
      colNames = App.Lang.tables[frmOpt.Source];
      me = this;
      btnSaveToDisable = null;
      if (!frmOpt) {
        console.warn("No frmOpt");
        return;
      }
      if (p.row) {
        if (p.row.iD) {
          frmOpt.NewRec = 0;
          frmOpt.id = p.row.iD;
        }
      }
      if (frmOpt.NewRec === "0") {
        frmOpt.NewRec = 0;
      }
      data = (frmOpt.Source === "NoData" ? "NoData" : oDATA.GET(frmOpt.Source));
      fnEnableSave = function() {
        if (btnSaveToDisable) {
          return btnSaveToDisable.removeAttr("disabled", "disabled");
        }
      };
      if (!frmOpt.NewRec) {
        if (p.btnSaveToDisable) {
          if (p.btnSaveToDisable.length === 1) {
            btnSaveToDisable = p.btnSaveToDisable;
            if (btnSaveToDisable.is("button")) {
              btnSaveToDisable.attr("disabled", "disabled");
            }
          } else {
            console.error("wrong btnSaveToDisable no: " + p.btnSaveToDisable.length);
          }
        } else {
          console.warn("no btnSaveToDisable");
        }
      }
      $(p.frm).find("div.ExtendIt, span.ExtendIt").each(function() {
        var AddToClasses, TimeValue, Type, col, colLabels, colVal, data_ctrl, e, eHTML, eOpt, field, input, isTime, ix, len, plugins, prop, v, val;
        e = $(this);
        eOpt = e.data("ctrl");
        eHTML = "";
        ix = -1;
        data_ctrl = {};
        colLabels = "";
        if (!eOpt) {
          console.warn('e-data not parsed');
          return true;
        }
        if (data !== "NoData") {
          field = eOpt.Field;
          colLabels = colNames.Cols[(eOpt.colLabels ? eOpt.colLabels : field)];
          if (!colLabels) {
            console.error("Wrong Field");
            debugger;
          }
        }
        col = (data !== "NoData" ? $.extend({}, data.Cols.findProperty("FName", field)) : {});
        input = void 0;
        /*
        				eCols = data.Cols
        				if eOpt.Field
        					i = 0
        					while i < eCols.length
        						if eCols[i].FName is eOpt.Field
        							ix = i
        							sTitle = data.Grid.aoColumns[i].sTitle
        							break
        						i++
        					console.error "Wrong Field indicated " + eOpt.Field + " in UpdatableForm(objFunc:84)!"	if ix is -1
        			sTitle = (if (eOpt.sTitle) then eOpt.sTitle else sTitle)
        			col = (if data!="NoData" then $.extend({}, data.Cols[ix]) else {}); input = undefined
        */

        if (eOpt.classes) {
          if (typeof eOpt.classes === "string") {
            eOpt.classes = {
              span: "",
              input: eOpt.classes
            };
          }
        } else {
          eOpt.classes = {
            span: "",
            input: ""
          };
        }
        col = $.extend(true, col, eOpt, {
          colLabels: colLabels
        });
        Type = (col.Type ? col.Type : (col.List ? "List" : ""));
        if (Type === 'undefined') {
          console.log("Nesusiparsino ctrl");
          debugger;
        }
        AddToClasses = "ui-widget-content ";
        if (!col.Radio) {
          AddToClasses += (e.hasClass("NotUpdateField") ? " NotUpdateField" : " UpdateField");
        }
        if (Type === "Integer" || Type === "Decimal") {
          AddToClasses += " number";
        } else if (Type === "List") {
          col.Type = "List";
        } else {
          if (Type ? Type.search("Date") !== -1 : void 0) {
            AddToClasses += " date";
          }
        }
        col.classes.input = col.classes.input + " " + AddToClasses;
        if (typeof col.Value !== "number" && typeof col.Value !== "boolean") {
          col.Value = (col.Value ? col.Value.replace(/'/g, '\"') : "");
        }
        for (prop in col) {
          if (prop === "List") {
            $.extend(data_ctrl, col[prop]);
          } else if (prop === "Value" || prop === "Validity" || prop === "AgrValidity" || prop === "Field" || prop === "Type" || prop === "Ext" || prop === "UpdateField" || prop === "Editable") {
            data_ctrl[prop] = col[prop];
          } else if (prop === "Radio") {
            colVal = parseInt(col.Value);
            if (!isNaN(colVal)) {
              col[prop].forEach(function(c) {
                var v;
                v = parseInt(c.value);
                if (colVal === v) {
                  return c.checked = 1;
                } else {
                  return delete c.checked;
                }
              });
            }
            data_ctrl[prop] = col[prop];
          }
        }
        if (p.row) {
          v = me.getValFromRow(col.FName, p.row);
          if (v) {
            data_ctrl.Value = v;
            col.Value = v;
          }
        }
        if (Type === "Integer" || Type === "Decimal") {
          if (typeof v === "number") {
            data_ctrl.Value = v;
            col.Value = v;
          } else if (v !== null && typeof v !== "undefined") {
            data_ctrl.Value = v;
            col.Value = v;
          }
        } else if (v) {
          data_ctrl.Value = v;
          col.Value = v;
        }
        data_ctrl = JSON.stringify(data_ctrl);
        if (Type === "Integer" || Type === "Decimal" || Type === "Money") {
          data_ctrl = data_ctrl.replace("match('integer')", "match(integer)").replace("match('number')", "match(number)");
        } else {
          if (Type.search("Date") !== -1) {
            data_ctrl = data_ctrl.replace("match('date')", "match(date)").replace("lessThanOrEqualTo(new Date())", "lessThanOrEqualTo(new Date(),\\&quot;Data negali būti didesnė už šiandieną.\\&quot;)");
          }
        }
        $.extend(col, {
          data_ctrl: data_ctrl
        }, {
          label: {
            txt: colLabels.caption,
            type: col.labelType
          }
        });
        if (Type === "Boolean" || Type === "checkbox") {
          eHTML = oCONTROLS.chk(col);
          $(eHTML).prependTo(e);
        } else if (Type === "String" || Type === "Email" || Type === "text" || Type === "Textarea" || Type === "hidden") {
          len = (typeof col.LenMax === "undefined" ? 0 : col.LenMax);
          if (Type === "hidden") {
            eHTML += oCONTROLS.hidden(col);
            input = $(eHTML).prependTo(e).parent().find("input:first");
          } else if (len < 101 && Type !== "Textarea") {
            eHTML += oCONTROLS.txt(col);
            input = $(eHTML).prependTo(e).parent().find("input:first");
          } else {
            eHTML += oCONTROLS.txtarea(col);
            input = $(eHTML).prependTo(e).parent().find("Textarea:first").autosize();
          }
        } else if (Type === "Integer" || Type === "Decimal" || Type === "Money") {
          eHTML += oCONTROLS.txt(col);
          input = $(eHTML).prependTo(e).parent().find("input:first");
        } else if (Type === "Radio" || col.Radio) {
          eHTML = oCONTROLS.radio(col);
          e.addClass("UpdateField").data("ctrl").Type = "Radio";
          $(eHTML).prependTo(e);
        } else if (Type.search("Date") !== -1) {
          isTime = 0;
          if (!col.Value && col.Default === "Today") {
            col.Value = oGLOBAL.date.getTodayString();
          }
          if (Type.search("Time") !== -1) {
            TimeValue = (col.Value.length >= 16 ? col.Value.substring(11, 16) : "00:00");
            isTime = 1;
          }
          col.Value = col.Value.substring(0, 11);
          eHTML += oCONTROLS.txt(col);
          if (isTime) {
            eHTML += oCONTROLS.txt({
              Value: TimeValue,
              title: "Laikas",
              classes: "ui-widget-content time",
              add: "onfocus='this.select()' onMouseUp='return false'"
            });
          }
          input = $(eHTML).prependTo(e).parent().find("input.time").inputControl({
            type: "Time"
          }).end().find("input:first");
        }
        if (col.List) {
          if (input) {
            input.ComboBox();
          } else {
            eHTML += oCONTROLS.txt(col);
            input = $(eHTML).prependTo(e).parent().find("input").ComboBox();
          }
        }
        plugins = (col.Plugin ? col.Plugin : false);
        if (plugins) {
          $.each(plugins, function(name, value) {
            return input[name](value);
          });
        }
        if (Type === "Boolean" || Type === "checkbox") {
          e.find("input:checkbox").on("click", fnEnableSave);
        } else if (col.List) {
          input.data("autocomplete").fnItemChanged = function(newId) {
            return fnEnableSave();
          };
        } else if (input) {
          val = input.val();
          if (input.hasClass("date") && !plugins.inputControl) {
            input.inputControl({
              type: "Date"
            });
          }
          if (input.hasClass("hasDatepicker") && plugins.datepicker) {
            input.datepicker("option", "onSelect", fnEnableSave).closest("div.ExtendIt").find("input.time").on("keyup", fnEnableSave);
          }
          input.on("keyup", fnEnableSave).val(val);
        }
        if (typeof input !== "undefined") {
          input.val($.trim(input.val()));
          if ((Type === "Integer" || Type === "Decimal" || Type === "Money") && !plugins.inputControl) {
            input.inputControl({
              type: Type
            });
          }
          return input.attr("placeholder", (colLabels.place ? colLabels.place : 'Pradėkite vesti..'));
        }
      });
      return Em.run.next({
        frm: p.frm
      }, function() {
        var frm;
        frm = $(this.frm);
        frm.parent().find("button").blur();
        if (frm.data("ctrl").NewRec) {
          return frm.find("input:text[value='']:first").focus();
        }
      });
    },
    ValidateForm: function(frm, DataToSaveAppend) {
      var DataTable, DataToSave, NewRec, ValRes, c, i, id;
      $("div.validity-modal-msg").remove();
      c = frm.data("ctrl");
      id = parseInt(c.id, 10);
      NewRec = parseInt(c.NewRec, 10);
      DataTable = (c.tblUpdate ? c.tblUpdate : (oDATA.GET(c.Source).Config.tblUpdate));
      if (!id & !NewRec) {
        console.error("Nėra nurodyta id formos data(ctrl)!");
      }
      $.validity.start();
      DataToSave = {
        Data: [],
        Fields: [],
        DataTable: DataTable
      };
      $.each(frm.find(".UpdateField:visible"), function(i, v) {
        var CheckIt, Empty, FName, NotEmpty, OldVal, Require, TimeCtrl, Type, UpdateField, Validity, Value, aVal, e, elDesc, val, valForMoney;
        e = $(v);
        elDesc = e[0].tagName + ", id-" + e.attr("id");
        Value = void 0;
        UpdateField = ((e.data("ctrl").UpdateField) ? e.data("ctrl").UpdateField : false);
        if (e.data("ctrl") === undefined) {
          console.error("Nerasta data(ctrl),el: " + elDesc);
          return true;
        }
        Type = void 0;
        FName = e.data("ctrl").Field;
        OldVal = (NewRec ? "" : $.trim(e.data("ctrl").Value));
        val = "";
        if (e.attr("type") === "checkbox") {
          if (!NewRec) {
            OldVal = (!OldVal || OldVal === "False" || OldVal === "0" ? 0 : 1);
          }
          val = (e.attr("checked") ? 1 : 0);
          if (e.data("ctrl").ToggleValue) {
            val = (val ? 0 : 1);
            OldVal = 10;
          }
        } else {
          if (typeof e.data("ctrl").Type === "undefined") {
            console.error("Nerastas elemento Tipas!");
          } else {
            Type = e.data("ctrl").Type;
            Validity = ((e.data("ctrl").Validity) ? e.data("ctrl").Validity : "");
            if (Type === "hidden") {
              val = e.val();
            } else if (Type === "Radio") {
              val = e.find("input:radio:checked").val();
              OldVal = e.data("ctrl").Value;
            } else if (Type.substring(0, 4) === "Date") {
              Validity = Validity.replace(/match\(date\)/g, "match('date')");
              val = $.trim(e.val());
              if (val === "-") {
                val = "";
              }
              if (Validity.indexOf("require") !== -1 || e.val() !== "") {
                eval("$(this)." + Validity);
                if (Type.search(/time/i) > -1) {
                  TimeCtrl = e.parent().next();
                  TimeCtrl.require().match(/^\d{2}[:]\d{2}$/, "Turi būti laiko formatas - valandos:minutės, pvz.12:30");
                  val = val + " " + TimeCtrl.val() + ":00";
                }
              }
            } else if (Type === "List") {
              if ($.isNumeric(e.data("newval"))) {
                val = e.data("newval");
              } else if (e.hasClass("notRequired")) {
                e.val("");
              } else {
                e.val("");
                e.require("Parinkite reikšmę iš sąrašo.");
              }
            } else {
              valForMoney = '';
              if (Type === "Decimal" || Type === "Integer" || Type === "Money") {
                e.val(e.val().replace(/,/g, "."));
                Validity = Validity.replace(/match\(number\)/g, "match('number')").replace(/match\(integer\)/g, "match('integer')");
              }
              val = e.val();
              if (Type === "Money") {
                valForMoney = val;
                val = val.replace(App.userData.currency, "").trim();
                e.val(val);
              }
              CheckIt = (id ? (OldVal !== val ? true : false) : true);
              Require = Validity.search(/require/i) > -1;
              NotEmpty = (val === "" ? false : true);
              if (CheckIt && (Require || NotEmpty) ? Validity : void 0) {
                eval("$(this)." + Validity);
              }
              if (Type === "Money") {
                e.val(valForMoney);
              }
            }
          }
          if (typeof e.data("ctrl").AgrValidity !== "undefined") {
            aVal = e.data("ctrl").AgrValidity;
            if (aVal.Validity === "require") {
              Empty = $.map($(aVal.Selector), function(e, index) {
                if ($(e).val()) {
                  return null;
                } else {
                  return 1;
                }
              });
              if (Empty.length === $(aVal.Selector).length) {
                e.require(aVal.Msg);
              }
            }
          }
        }
        if (OldVal !== val || (val === 0 && OldVal === "") || NewRec) {
          if (UpdateField) {
            return DataToSave[UpdateField] = val;
          } else {
            DataToSave.Data.push(val);
            return DataToSave.Fields.push(FName);
          }
        }
      });
      if (typeof DataToSaveAppend === "object") {
        if ($.isArray(DataToSaveAppend)) {
          i = 0;
          while (i < DataToSaveAppend.length) {
            DataToSave.Data.push(DataToSaveAppend[i].Data);
            DataToSave.Fields.push(DataToSaveAppend[i].Fields);
            i++;
          }
        } else {
          if (!$.isEmptyObject(DataToSaveAppend)) {
            i = 0;
            while (i < DataToSaveAppend.Data.length) {
              DataToSave.Data.push(DataToSaveAppend.Data[i]);
              DataToSave.Fields.push(DataToSaveAppend.Fields[i]);
              i++;
            }
          }
        }
      }
      ValRes = $.validity.end();
      if (ValRes.valid && DataToSave.Data.length) {
        if (!NewRec) {
          DataToSave["id"] = id;
        }
        return DataToSave;
      } else if (ValRes.valid) {
        return 0;
      } else {
        return false;
      }
    },
    lbl: function(text) {
      return "<label class='dialog-form-label'>" + text + "</label>";
    },
    AddToProperty: function(Object, Property, Value) {
      Object[Property] = (Object[Property] ? Object[Property] + " " + Value : Value);
      return Object;
    },
    basic: function(p) {
      var classes;
      classes = "";
      if (typeof p.classes === "string") {
        classes = p.classes;
      } else {
        if (p.classes.input) {
          classes = p.classes.input;
        }
      }
      return (p.add ? p.add + " " : "") + (p.attr ? p.attr + " " : "") + (p.id ? "id='" + p.id + "' " : "") + (p.style ? "style=\"" + p.style + "\" " : "") + (p.notabstop ? "tabindex='-1' " : "") + (p.title ? "title='" + p.title + "' " : "") + (p.data_ctrl ? "data-ctrl='" + p.data_ctrl + "' " : "") + (classes ? "class='" + classes + "' " : "");
    },
    appendLabel: function(p, t) {
      var Top, classes;
      if (!p.label) {
        return t;
      }
      if (!p.label.txt || p.label.type === "None") {
        return t;
      }
      if (typeof p.label === "undefined" || p.label === "None") {
        return t;
      } else {
        if (p.classes ? p.classes.label : void 0) {
          classes = p.classes.label;
        }
        Top = (p.label.type === "Top" ? true : false);
        return "<label class='" + (Top ? "toplabel" : "leftlabel") + (classes ? " " + classes : "") + (p.colLabels.tip ? " js-tip-help" : "") + "'><span " + (p.classes.span ? "class='" + p.classes.span + "'" : "") + "><span>" + p.label.txt + (Top ? "" : ":") + "</span></span>" + t + "</label>";
      }
    },
    txt: function(p) {
      if (p.Type === "Integer" || p.Type === "Decimal") {
        p.Value = p.Value + "";
      }
      return this.appendLabel(p, "<input type='text' " + this.basic(p) + (p.Value ? "value=\"" + $.trim(p.Value).replace(/"/g, "&quot;") + "\" " : "") + "/>");
    },
    hidden: function(p) {
      return this.appendLabel(p, "<input type='hidden' " + this.basic(p) + (p.Value ? "value=\"" + $.trim(p.Value).replace(/"/g, "&quot;") + "\" " : "") + "/>");
    },
    radio: function(p) {
      var cl, classes, retStr;
      if (p.classes.label) {
        classes = p.classes.label;
      }
      cl = (p.classes ? p.classes : "");
      retStr = "<label" + (p.colLabels.tip ? " class='js-tip-help'" : "") + ">" + p.colLabels.caption + ":</label>";
      retStr += p.Radio.map(function(rad, i) {
        return "<label " + (cl.label ? "class='" + cl.label + "'" : "") + "><input " + (cl.input ? "class='" + cl.input + "'" : "") + " type='radio' name='rd_" + p.Field + "' value='" + rad.value + "'" + (rad.checked ? " checked" : "") + "/>" + rad.label + "</label>";
      }).join("");
      return retStr;
    },
    a: function(p) {
      return "<a " + this.basic(p) + " href='javascript:void(0);return false;'>" + $.trim(p.Value).replace(/"/g, "&quot;") + "</a>";
    },
    txtarea: function(p) {
      return this.appendLabel(p, "<textarea cols='100' rows='" + (p.textAreaRows ? p.textAreaRows : 4) + "' " + this.basic(p) + ">" + (p.Value ? p.Value.replace(/"/g, "&quot;") : "") + "</textarea>");
    },
    chk: function(p) {
      if (typeof p.Value === "string") {
        p.Value = (p.Value.toLowerCase().search(/false/i) > -1 || p.Value === "" || p.Value === 0 ? 0 : 1);
      }
      return "<label " + (p.label.classes ? " class='" + p.label.classes + "'" : "") + (p.attr ? p.attr + " " : "") + "><input type='checkbox' " + this.basic(p) + (p.Value ? "checked='checked'" : "") + "/>" + (p.label.txt ? p.label.txt : "") + "</label>";
    },
    img: function(p) {
      return "<img src='" + p.src + "' alt='" + p.alt + "' onclick='" + p.onclickfn + "'/>";
    },
    ui_img: function(p) {
      return "<span class='ui-icon " + p.name + "' style='" + p.style + ";margin-top:.5em;' onclick=\"" + p.onclickfn + "\"/>";
    },
    txt_imgINtxt: function(pWraper, ptxt, pui_img) {
      ptxt.classes = (ptxt.classes ? ptxt.classes + " InputInWraper" : "InputInWraper");
      w = "width:" + (pWraper.width - 20) + "px;";
      ptxt.style = (ptxt.style ? ptxt.style + w : w);
      return "<div " + this.basic(pWraper) + "width:" + pWraper.width + "px;" + "'>" + this.txt(ptxt) + this.ui_img(pui_img) + "</div>";
    },
    btnOKimg: function(title) {
      return "<button tabindex='-1' title='" + title + "' class='ui-button ui-widget ui-state-default ui-button-icon-only ui-corner-all ui-button-icon' role='button'><span class='ui-button-icon-primary ui-icon ui-icon-circle-check'></span><span class='ui-button-text'>&nbsp;</span></button></div>";
    },
    lbltxt_inline_btnConfirm: function(id, lblTitle, txtData, txtValue, btnTitle) {
      return "<div id=" + id + "><label class='dialog-form-r'>" + lblTitle + "</label><input type='text' data-ctrl=\"" + txtData + "\" value='" + txtValue + "' class='validate-dialog ui-widget-content ui-corner-left'/><button tabindex='-1' title='" + btnTitle + "' class='ui-button ui-widget ui-state-default ui-button-icon-only ui-corner-right ui-button-icon' role='button'><span class='ui-button-icon-primary ui-icon ui-icon-circle-check'></span><span class='ui-button-text'>&nbsp;</span></button></div>";
    },
    lbla_inline: function(id, lblTitle, aValue, data_ctrl) {
      return "<div id=" + id + "><label class='dialog-form-label'>" + lblTitle + "</label><a data-ctrl=\"" + data_ctrl + "\" href='javascript:void(0);'>" + aValue + "</a></div>";
    },
    btnTextOnly: function(p) {
      oCONTROLS.AddToProperty(p, "classes", "ui-button ui-corner-all ui-button-text-icon-primary");
      return "<button " + oCONTROLS.basic(p) + "\" role=\"button\"><span class=\"ui-button-text\">" + p.text + "</span></button>";
    },
    btnImgOnly: function(p) {
      oCONTROLS.AddToProperty(p, "classes", "ui-button ui-corner-all ui-icon-only");
      return "<button " + oCONTROLS.basic(p) + "\" role=\"button\"><span class=\"ui-button-icon-primary ui-icon " + p.icon + "\"></span></button>";
    },
    btnTextImg: function(p) {
      oCONTROLS.AddToProperty(p, "classes", "ui-button ui-corner-all ui-button-text-icon-primary");
      return "<button " + oCONTROLS.basic(p) + "\" role=\"button\"><span class=\"ui-button-icon-primary ui-icon " + p.icon + "\"></span><span class=\"ui-button-text\">" + p.text + "</span></button>";
    },
    OptionList: function(p) {
      var HTML, I, Ix, Text, i, iobj, ix, obj, txtIx;
      HTML = "<select id='" + p.id + "' name= id='" + p.id + "'>";
      i = 0;
      while (i < p.Arr.length) {
        Text = [];
        I = 0;
        while (I < p.TextI.length) {
          Text.push(p.Arr[i][p.TextI[I]]);
          I++;
        }
        if (typeof p.ReplaceArr !== "undefined") {
          iobj = 0;
          while (iobj < p.ReplaceArr.length) {
            obj = p.ReplaceArr[iobj].obj.Data;
            Ix = p.ReplaceArr[iobj].Ix;
            txtIx = p.ReplaceArr[iobj].txtIx;
            ix = 0;
            while (ix < obj.length) {
              if (Text[Ix] === obj[ix][0]) {
                Text[Ix] = obj[ix][txtIx];
                break;
              }
              ix++;
            }
            iobj++;
          }
        }
        Text = Text.join(", ");
        if (p.SelectedID) {
          HTML += "<option value=\"" + p.Arr[i][p.ValI] + (+p.Arr[i][0] === p.SelectedID ? "\" selected=\"selected\"" : "\"") + ">" + Text + "</option>";
        } else {
          HTML += "<option value=\"" + p.Arr[i][p.ValI] + "\">" + Text + "</option>";
        }
        i++;
      }
      return HTML + "</select>";
    },
    Set_Updatable_HTML: {
      mega_select_list: function(d) {
        var HTML, Opt, i, listHTML;
        HTML = "<div class='container medium heading'><div class='left'>" + d.opt.SelectText + "<span></span></div>" + "<div class='right'><a id='aCancelSelectOpt' class='floatright btn' href='#'>Atšaukti</a></div></div>";
        HTML += "<div class='megaselectlistoptions clearfix'>";
        listHTML = "";
        i = 1;
        while (i < d.oDATA.emData.length) {
          listHTML += "<div class='megaselectlistcolumn'><ul>";
          listHTML += "<li 'tabindex=-1' data-val=" + d.oDATA.emData[i][d.opt.val] + ">" + d.oDATA.emData[i][d.opt.text] + "</li>";
          listHTML += "<li 'tabindex=-1' data-val=" + d.oDATA.emData[i + 1][d.opt.val] + ">" + d.oDATA.emData[i + 1][d.opt.text] + "</li>";
          listHTML += "<li 'tabindex=-1' data-val=" + d.oDATA.emData[i + 2][d.opt.val] + ">" + d.oDATA.emData[i + 2][d.opt.text] + "</li></ul></div>";
          i += 3;
        }
        HTML += listHTML + "<div style='clear: both;'></div></div></hr>";
        $(d.ctrl).append(HTML);
        Opt = d.ctrl.find("div.megaselectlistoptions");
        Opt.data("height", Opt.height());
        d.ctrl.find("a.floatright").bind("click", function() {
          d.fnCancel();
          return false;
        });
        d.ctrl.find("li").bind("click", function() {
          var li;
          $("#aCancelSelectOpt").remove();
          li = $(this);
          d.ctrl.find("span:eq(0)").html(li.html());
          d.ctrl.data("ctrl")[d.opt.FieldName] = li.data("val");
          d.ctrl.attr("data-ctrl", JSON.stringify(d.ctrl.data("ctrl")));
          if (typeof d.fnAfterOptClick === "function") {
            d.fnAfterOptClick($(this));
          }
          return d.ctrl.find("div.megaselectlistoptions").height("0px");
        });
        return d.ctrl.find("span").bind("click", function() {
          Opt = d.ctrl.find(".megaselectlistoptions");
          if (Opt.height() === 0) {
            return Opt.animate({
              height: Opt.data("height") + "px"
            });
          } else {
            return Opt.animate({
              height: "0px"
            });
          }
        });
      },
      lbltxt_inline_btnConfirm: function(d) {
        d.ctrl.html(oCONTROLS.lbl(d.lblTitle) + oCONTROLS.txt(d.txt.Title, d.txt.Value, "{\"Validity\":\"" + d.Data.Validity + "\"}") + oCONTROLS.btnOKimg(d.btnTitle));
        if (typeof d.fnPostInit !== "undefined") {
          d.fnPostInit();
        }
        return d.ctrl.find("button").bind("click", function(e) {
          e.preventDefault();
          if (oGLOBAL.ValidateCtrlsArr([d.ctrl.find("input")])) {
            d.DataToSave.Data[0] = d.ctrl.find("input").val();
            SERVER.update("Edit", d.DataToSave, d.Data.tblToUpdate, d.fnCallBack, "");
          }
          d.ctrl.block("Siunčiami duomenys..");
          return false;
        });
      },
      lbla_inline: function(d) {
        d.ctrl.html(oCONTROLS.lbla_inline("divID" + d.DataToSave.id, d.lblTitle, d.Value, ""));
        return d.ctrl.find("a").bind("click", function(e) {
          e.preventDefault();
          SERVER.update("Edit", d.DataToSave, d.Data.tblToUpdate, d.fnCallBack, "");
          d.ctrl.block("Siunčiami duomenys..");
          return false;
        });
      }
    },
    table: {
      getAll: function(p) {
        var c, f, last, len, thead;
        f = p.fields;
        c = p.content;
        len = f.length;
        last = len - 1;
        if (len !== Object.keys(c[0]).length) {
          console.error("notSameNo");
        }
        thead = "<table class='zebra-striped'><thead><tr><th>";
        f.forEach(function(col, i) {
          if (col.visible) {
            thead += col.title;
            return thead += (i !== last ? "</th><th>" : "</th></thead>");
          }
        });
        return thead + this.getBody(p) + "</table>";
      },
      getBody: function(p) {
        var f, tbody;
        tbody = "<tbody>";
        f = p.fields;
        p.content.forEach(function(row) {
          tbody += "<tr><td>";
          return f.forEach(function(col, i) {
            if (col.visible) {
              tbody += row[col.name];
              return tbody += (i !== last ? "</td><td>" : "</td></tr>");
            }
          });
        });
        return tbody + "</tbody>";
      }
    },
    dialog: {
      opt: {
        title: "",
        msg: "",
        autoOpen: false,
        height: "auto",
        width: 350,
        minWidth: 300,
        modal: true,
        show: "clip",
        hide: "clip",
        close: function() {
          return oCONTROLS.dialog.destroy(this);
        }
      },
      destroy: function(t) {
        $(t).dialog("destroy");
        return $("#dialog_form_tmp_id").remove();
      },
      Alert: function(opt) {
        var buttons;
        buttons = {
          Gerai: function() {
            return oCONTROLS.dialog.destroy(this);
          }
        };
        return this.showDialog(opt, buttons);
      },
      Confirm: function(opt, fnCallBack) {
        var buttons, isLink;
        oCONTROLS.dialog.fnCallBack = fnCallBack;
        isLink = false;
        buttons = {
          Taip: function() {
            var d;
            d = oCONTROLS.dialog;
            d.fnCallBack();
            return d.destroy(this);
          },
          Ne: function() {
            return oCONTROLS.dialog.destroy(this);
          }
        };
        if (typeof fnCallBack === "string") {
          delete buttons["Taip"];
          opt.open = function(e, ui) {
            return $("<a />", {
              "class": "linkClass linkYes",
              text: "Taip",
              href: fnCallBack,
              target: "_blank"
            }).insertBefore($(".ui-dialog-buttonpane button"));
          };
          isLink = true;
        }
        return this.showDialog(opt, buttons, isLink);
      },
      showDialog: function(opt, buttons, isLink) {
        var $dialog, o;
        o = $.extend(true, {}, this.opt, {
          buttons: buttons
        }, opt);
        $dialog = $("<div id=\"dialog_form_tmp_id\">").html(opt.msg).dialog(o).dialog("open");
        return Em.run.next(function() {
          return $("#dialog_form_tmp_id").on("click", "a.linkYes", function() {
            return alert("opa");
          });
        });
      }
    }
  };

}).call(this);

/*
//@ sourceMappingURL=oCONTROLS.map
*/
