// Generated by CoffeeScript 1.3.3
(function() {
  var w=window, App=w.App, Em=w.Em, oGLOBAL=w.oGLOBAL, oDATA=w.oDATA, oCONTROLS=w.oCONTROLS, MY=w.MY;

  App.listsStart = function() {
    return oDATA.fnLoad({
      url: "Main/topNew",
      callBack: function() {
        App.topNewController.vehicles.clear();
        App.topNewController.drivers.clear();
        App.topNewController.insPolicies.clear();
        App.topNewController.drivers.pushObjects(oDATA.GET("proc_topDrivers").emData.slice(0, 3));
        App.topNewController.vehicles.pushObjects(oDATA.GET("proc_topVehicles").emData.slice(0, 3));
        return App.topNewController.insPolicies.pushObjects(oDATA.GET("proc_topInsPolicies").emData.slice(0, 3));
      }
    });
  };

  App.topNewController = Em.ResourceController.create({
    vehicles: [],
    drivers: [],
    insPolicies: [],
    tableName: "?"
  });

  App.DriverView = Em.View.extend({
    edit: function(e) {
      var id, tr;
      alert("opa");
      tr = $(e.target).closest('tr');
      return id = e.view._context.iD;
    },
    templateName: 'tmpDriverRow',
    tagName: ""
  });

  App.VehicleView = Em.View.extend({
    templateName: 'tmpVehicleRow',
    tagName: ""
  });

  App.InsPolicyView = Em.View.extend({
    templateName: 'tmpInsPolicyRow',
    tagName: ""
  });

  App.listAllController = Em.ResourceController.create({
    current: "",
    clicked: "",
    filterValue: "",
    valueDidChange: (function() {
      return this.filterItems();
    }).observes('filterValue'),
    init: function() {
      this._super();
      return oDATA.execWhenLoaded(["proc_Vehicles", "proc_Drivers", "proc_InsPolicies"], function() {
        App.listAllController.set("vehicles", oDATA.GET("proc_Vehicles").emData);
        App.listAllController.set("drivers", oDATA.GET("proc_Drivers").emData);
        return App.listAllController.set("insPolicies", oDATA.GET("proc_InsPolicies").emData);
      });
    },
    addNew: function(e) {
      var pars;
      pars = $(e.target).parent().data("ctrl");
      return new oGLOBAL.clsEditableForm({
        objData: pars.source,
        Action: "Add",
        CallBackAfter: function(RowData) {
          if (RowData.docs !== void 0) {
            RowData.docs = '(0)';
          }
          if (pars.controller === "topNewController") {
            return App[pars.controller][pars.emObject].unshiftObject(RowData);
          }
        }
      });
    },
    edit: function(e) {
      var context, pars;
      context = e.view._context;
      pars = $(e.target).closest("table").next().data("ctrl");
      pars = pars ? pars : this.current;
      return new oGLOBAL.clsEditableForm({
        pars: pars,
        objData: pars.source,
        aRowData: context,
        Action: "Edit",
        CallBackAfter: function(RowData, opt) {
          if (opt.pars.controller === "topNewController") {
            return oDATA.GET(opt.pars.source).emData.findProperty("iD", RowData.iD).updateTo(RowData);
          }
        }
      });
    },
    filterByField: function() {
      var fn;
      fn = !this.filterValue ? "return true;" : "var ret=false,cols=" + JSON.stringify(this.current.filterCols) + ";console.log('Filtering by val:" + this.filterValue + "'); for(var i=0; i < cols.length; i++){console.log(row[cols[i]]+', '+(row[cols[i]].toLowerCase().indexOf('" + this.filterValue + "')>-1));  if (row[cols[i]].toLowerCase().indexOf('" + this.filterValue + "')>-1){ret=true; break;}} console.log('filterByval rez: '+ret);return ret;";
      return new Function("row", fn);
    },
    filterByTab: function() {
      var fn, mark;
      if (this.current.emObject === "drivers") {
        mark = this.clicked === "NotWorking" ? "!" : "";
        fn = "var ret=true; if ($.trim(row.dateEnd)) {ret=oGLOBAL.date.firstBigger(row.dateEnd);} console.log('dateEnd: '+row.dateEnd+', '+ret);return " + mark + "ret";
      } else if (this.current.emObject === "vehicles") {
        mark = this.clicked === "NotWorking" ? "!" : "";
        fn = "var ret=true; if ($.trim(row.endDate)) {ret=oGLOBAL.date.firstBigger(row.endDate);} console.log('endDate: '+row.endDate+', '+ret);return " + mark + "ret";
      } else {
        throw new Error("filterByTab has no such emObject");
      }
      return new Function("row", fn);
    },
    filterItems: function() {
      var fn,
        _this = this;
      if (this.current.emObject === "insPolicies") {
        fn = function(row) {
          var v;
          v = _this.filterByField()(row);
          console.log("finalRez: " + v);
          return row.set('visible', v);
        };
      } else {
        fn = function(row) {
          var v;
          v = (_this.filterByTab()(row) ? _this.filterByField()(row) : false);
          console.log("finalRez: " + v);
          return row.set('visible', v);
        };
      }
      return App.listAllController[this.current.emObject].forEach(fn);
    },
    showTabs: function(e) {
      var t;
      t = $(e.target);
      t.closest("ul").find("li").removeClass("ui-tabs-selected ui-state-active");
      return t.closest("li").addClass("ui-tabs-selected ui-state-active");
    },
    filterWorking: function(e) {
      this.set("clicked", "Working");
      this.showTabs(e);
      return this.filterItems();
    },
    filterNotWorking: function(e) {
      this.set("clicked", "NotWorking");
      this.showTabs(e);
      return this.filterItems();
    },
    vehicles: [],
    drivers: [],
    insPolicies: [],
    tableName: "?"
  });

  App.TopListsView = App.mainMenuView.extend({
    templateName: 'tmpListsTop',
    viewIx: 4
  });

  App.AllDriversView = App.mainMenuView.extend({
    init: function() {
      this._super();
      return App.listAllController.set("content", oDATA.GET("proc_Drivers").emData);
    },
    templateName: 'tmpAllDrivers',
    viewIx: 4,
    didInsertElement: function() {
      var view;
      this._super();
      view = $("#tabLists");
      view.find("div.ui-tabs").find("li:first a").trigger("click");
      return view.find("table.zebra-striped").tblSortable({
        cols: ["firstName", "lastName", "dateExpierence", "drivingCategory", "phone", "docs"],
        controller: "listAllController",
        sortedCol: 1
      });
    },
    edit: function(e) {
      return alert("opa");
    }
  });

  App.AllInsPoliciesView = App.mainMenuView.extend({
    init: function() {
      this._super();
      return App.listAllController.set("content", oDATA.GET("proc_InsPolicies").emData);
    },
    templateName: 'tmpAllInsPolicies',
    viewIx: 4,
    didInsertElement: function() {
      return $("#tabLists").find("table.zebra-striped").tblSortable({
        cols: ["claimType", "insurerName", "policyNumber", "endDate", "isuredName"],
        controller: "listAllController",
        sortedCol: 0
      });
    }
  });

  App.AllVehiclesView = App.mainMenuView.extend({
    init: function() {
      this._super();
      return App.listAllController.set("content", oDATA.GET("proc_Vehicles").emData);
    },
    templateName: 'tmpAllVehicles',
    viewIx: 4,
    didInsertElement: function() {
      var view;
      this._super();
      view = $("#tabLists");
      view.find("div.ui-tabs").find("li:first a").trigger("click");
      return view.find("table.zebra-striped").tblSortable({
        cols: ["plate", "type", "make", "model", "year", "docs"],
        controller: "listAllController",
        sortedCol: 0
      });
    }
  });

  MY.lists = {};

}).call(this);
