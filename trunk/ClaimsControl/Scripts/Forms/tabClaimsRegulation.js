// Generated by CoffeeScript 1.6.2
(function() {
  var w=window, App=w.App, Em=w.Em, oGLOBAL=w.oGLOBAL, oDATA=w.oDATA, oCONTROLS=w.oCONTROLS, MY=w.MY;
  var ACTIVITYVIEW, DOCSVIEW, docsViewOpts;

  ACTIVITYVIEW = {};

  DOCSVIEW = {};

  App.tabClaimsRegulationController = Em.ArrayController.create({
    stepsCont1: ['<a href="#">Parenkite ir siųskite</a><div>arba</div><a href="#">Užregistruokite</a>', '<a href="#">Patvirtinti, kad visa informacija yra pateikta</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę žalos sumą</a>', '<a href="#">Patvirtinti #### Lt kaip galutinę išmokos sumą</a>', '<a href="#">Uždaryti bylą</a>'],
    stepsCont2: ['Draudikui pranešta ####', 'Visa informacija pateikta:</br>####</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė žalos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Patvirtinta galutinė išmokos suma: #### Lt</br><a href="#">Atšaukti</a>', 'Byla uždaryta <a href="#"></br>Atidaryti</a>'],
    stepsConfirm: ['', '<p>Įveskite paskutinio dokumento pateikimo datą:</p><input class="date" type="text" value="####"><button class="btn btn-small">Patvirtinti</button>', '<p>Galutinė žalos dydžio suma - #### Lt.</p><button class="btn btn-small">Patvirtinti</button>', '<p>Galutinė išmokos dydžio suma - #### Lt</p><button class="btn btn-small">Patvirtinti</button>', ''],
    stepVal: [],
    stepsTemp: [
      {
        stepNo: 1,
        name: 'Pranešimas draudikui'
      }, {
        stepNo: 2,
        name: 'Informacija draudikui'
      }, {
        stepNo: 3,
        name: 'Žalos suma'
      }, {
        stepNo: 4,
        name: 'Draudimo išmoka'
      }, {
        stepNo: 5,
        name: 'Bylos uždarymas'
      }
    ],
    fnSetContent: function(isCurrent, idx) {
      var content;

      if (!this.claim.steps) {
        return;
      }
      content = isCurrent ? this.stepsCont1 : this.stepsCont2;
      return this.claim.steps[idx].set('content', content[idx].replace('####', this.stepVal[idx]));
    },
    setSteps: function() {
      var claim, fnGetContent, reached, s, s1, s2, sConfirm, sTemp, sVal, today;

      claim = this.claim;
      today = oGLOBAL.date.getTodayString();
      this.set('stepVal', [today, today, claim.lossAmount, claim.insuranceClaimAmount, '']);
      sTemp = this.stepsTemp;
      s1 = this.stepsCont1;
      s2 = this.stepsCont2;
      sConfirm = this.stepsConfirm;
      s = [];
      sVal = this.stepVal;
      reached = false;
      fnGetContent = function(cnt, idx) {
        return cnt[idx].replace("####", sVal[idx]);
      };
      sTemp.forEach(function(item) {
        var idx, step;

        step = $.extend({}, item);
        idx = item.stepNo - 1;
        if (claim.claimStatus + 1 === step.stepNo) {
          step.step = 'current';
          reached = true;
          step.content = fnGetContent(s1, idx);
        } else {
          if (reached) {
            step.step = 'pending';
          } else {
            step.step = 'completed';
            step.content = claim.claimStatus === step.stepNo ? fnGetContent(s2, idx) : fnGetContent(s2, idx).replace('<a href="#">Atšaukti</a>', '');
          }
        }
        return s.pushObject(Em.Object.create(step));
      });
      claim.steps = s;
      return this;
    },
    fnStepForward: function(idx) {
      var dF, newHtml, newStepNo, s, stepVal;

      s = this.claim.steps;
      stepVal = this.stepVal;
      newStepNo = idx + 1;
      s[idx].set('step', 'completed');
      s[idx].set('content', this.stepsCont2[idx].replace('####', stepVal[idx]));
      if (s.length !== newStepNo) {
        s[newStepNo].set('step', 'current');
        s[idx + 1].set('content', this.stepsCont1[newStepNo].replace('####', stepVal[newStepNo]));
      }
      if (idx - 1 > 0) {
        newHtml = this.stepsCont2[idx - 1].replace('####', stepVal[idx - 1]).replace('<a href="#">Atšaukti</a>', '');
        s[idx - 1].set('content', newHtml);
      }
      dF = {
        Data: [newStepNo],
        Fields: ['claimStatus']
      };
      if (newStepNo === 1) {
        dF.Fields.push("DateNotification");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 2) {
        dF.Fields.push("DateDocsSent");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 3) {
        dF.Fields.push("LossAmount");
        dF.Data.push(stepVal[idx]);
      } else if (newStepNo === 4) {
        dF.Fields.push("InsuranceClaimAmount");
        dF.Data.push(stepVal[idx]);
      }
      return this.fnSaveData(dF);
    },
    fnConfirm: function(stepBox, idx) {
      var newHtml;

      newHtml = '<div class="step-box-addon"><div class="inner">' + (this.stepsConfirm[idx].replace("####", this.stepVal[idx])) + '</div></div>';
      return $(newHtml).appendTo(stepBox).hide().slideDown('slow', function() {
        return $(this).css('overflow', 'visible');
      });
    },
    fnStepBack: function(idx) {
      var dF, s;

      s = this.claim.steps;
      s[idx].set('step', 'current');
      s[idx].set('content', this.stepsCont1[idx].replace('####', this.stepVal[idx]));
      if (idx + 1 < 5) {
        s[idx + 1].set('step', 'pending');
        s[idx + 1].set('content', '');
      }
      if (idx - 1 > 0) {
        s[idx - 1].set('content', this.stepsCont2[idx - 1].replace('####', this.stepVal[idx - 1]));
      }
      dF = {
        Data: [idx],
        Fields: ['claimStatus']
      };
      return this.fnSaveData(dF);
    },
    fnSaveData: function(dataAndFields) {
      var DataToSave;

      DataToSave = $.extend({
        "id": this.claim.iD,
        "DataTable": "tblClaims"
      }, dataAndFields);
      SERVER.update2({
        Action: 'Edit',
        DataToSave: DataToSave,
        Ctrl: $("#claimsSteps"),
        source: "proc_Claims",
        row: this.claim,
        CallBackAfter: function(Row) {
          return console.log(Row);
        }
      });
      return this.fnclaimStatusChanged();
    },
    target: (function() {
      return this;
    }).property(),
    damageSum: 0,
    insurerSum: 0,
    compensationSum: 0,
    activitiesTbl: [],
    finDamageTbl: [],
    finInsurerTbl: [],
    finOtherPartyTbl: [],
    fnSum: function(arr) {
      var sum;

      sum = 0;
      arr.forEach(function(item) {
        return sum += item.amount;
      });
      return sum.toRound();
    },
    fnclaimStatusChanged: (function() {
      var DataToSave, cl, opt;

      if (this.claim.claimStatus > 2 || this.claimStatusBefore > 2) {
        cl = this.claim;
        DataToSave = {
          DataTable: "tblClaims",
          Ext: cl.accidentID,
          id: cl.iD,
          Fields: ["ClaimStatus"],
          Data: [cl.claimStatus]
        };
        if (cl.claimStatus === 3) {
          DataToSave.Fields.push("lossAmount");
          DataToSave.Data.push(cl.lossAmount);
        }
        if (cl.claimStatus === 4) {
          DataToSave.Fields.push("insuranceClaimAmount");
          DataToSave.Data.push(cl.insuranceClaimAmount);
        }
        opt = {
          Action: "Edit",
          DataToSave: DataToSave,
          CallBack: {
            Success: App.claimEditController.fnUpdateAccident
          }
        };
        SERVER.update(opt);
        return this.claimStatusBefore = this.claim.claimStatus;
      }
    }),
    finDamageChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = this.fnSum(this.finDamageTbl);
        this.set('damageSum', sum);
        if (this.claim.claimStatus < 3) {
          this.claim.set("lossAmount", sum);
          this.stepVal[2] = sum;
          if (this.claim.claimStatus === 2) {
            return this.fnSetContent(true, 2);
          }
        }
      });
    }).observes('finDamageTbl.@each'),
    finInsurerChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = this.fnSum(this.finInsurerTbl);
        this.set('insurerSum', sum);
        if (this.claim.claimStatus < 4) {
          this.claim.set("insuranceClaimAmount", sum);
          this.stepVal[3] = sum;
          if (this.claim.claimStatus === 3) {
            return this.fnSetContent(true, 3);
          }
        }
      });
    }).observes('finInsurerTbl.@each'),
    finOtherPartyChanged: (function() {
      return Em.run.next(this, function() {
        var sum;

        sum = 0;
        this.finOtherPartyTbl.forEach(function(item) {
          return sum += item.amount;
        });
        return this.set('compensationSum', sum.toRound());
      });
    }).observes('finOtherPartyTbl.@each'),
    setActivitiesTable: function(newDocNo) {
      var activities, activitiesTbl, claimID;

      claimID = this.claim.iD;
      console.log("Showing all activities Claim iD: " + claimID);
      activities = oDATA.GET("proc_Activities").emData;
      if (newDocNo) {
        activities.findProperty("iD", newDocNo.iD).set("docs", "(" + newDocNo.docNo + ")");
      }
      activities = activities.filter(function(item) {
        return item.claimID === claimID;
      });
      this.set("users", oDATA.GET("tblUsers").emData);
      activitiesTbl = activities.map(this.fnMapActivitiesRecord, this);
      return this.set("activitiesTbl", activitiesTbl);
    },
    setFinancesTables: function(newDocNo) {
      var claimID, finTypes, finances;

      claimID = this.claim.iD;
      console.log("Setting finances table");
      finances = oDATA.GET("proc_Finances").emData;
      if (newDocNo) {
        finances.findProperty("iD", newDocNo.iD).set("docs", "(" + newDocNo.docNo + ")");
      }
      finances = finances.filter(function(item) {
        return item.claimID === claimID;
      });
      finTypes = oDATA.GET("tblFinTypes").emData;
      this.TypesKasko = finTypes.slice(0, 2);
      this.TypesCA = finTypes.slice(2, 4);
      this.set('finDamageTbl', []).set('finInsurerTbl', []).set('finOtherPartyTbl', []);
      return finances.forEach(this.fnMapFinancesRecord, this);
    },
    users: null,
    TypesKasko: null,
    TypesCA: null,
    fnGetUser: function(userID) {
      var u;

      u = this.users.find(function(user) {
        return user.iD === userID;
      });
      return u.firstName + " " + u.surname;
    },
    fnGetIcon: function(activityID) {
      switch (activityID) {
        case 1:
          return 'sent_mail';
        case 2:
          return 'recieved_mail';
        case 3:
          return 'tasks';
        case 4:
          return 'phone';
        case 5:
          return 'meeting';
        case 6:
          return 'note';
      }
    },
    fnGetFrom: function(acts) {
      switch (acts.activityTypeID) {
        case 1:
        case 2:
          return console.error('not implemented');
        case 3:
        case 6:
          return this.fnGetUser(acts.fromID);
        case 4:
        case 5:
          return acts.fromText;
        default:
          return console.error('not implemented');
      }
    },
    fnGetTo: function(acts) {
      switch (acts.activityTypeID) {
        case 1:
        case 2:
          return console.error('not implemented');
        case 3:
          return this.fnGetUser(acts.toID);
        case 4:
        case 5:
          return acts.toText;
        case 6:
          return "";
        default:
          return console.error('not implemented');
      }
    },
    fnGetSubject: function(acts) {
      var text;

      text = acts.activityTypeID === 6 ? acts.body : acts.subject;
      if (text.length > 25) {
        return text.slice(0, 25) + " [...]";
      } else {
        return text;
      }
    },
    fnMapFinancesRecord: function(finRec) {
      switch (finRec.financesTypeID) {
        case 1:
        case 2:
          return this.finDamageTbl.push(this.fnMapDamageRecord(finRec, this.TypesKasko));
        case 3:
        case 4:
          return this.finDamageTbl.push(this.fnMapDamageRecord(finRec, this.TypesCA));
        default:
          if (finRec.financesTypeID === 5) {
            return this.finInsurerTbl.push(this.fnMapRefundRecord(finRec));
          } else {
            return this.finOtherPartyTbl.push(this.fnMapRefundRecord(finRec));
          }
      }
    },
    fnMapDamageRecord: function(f, arrTypes) {
      return Em.Object.create({
        iD: f.iD,
        amount: f.amount,
        docType: (f.financesTypeID === arrTypes[0].iD ? arrTypes[0].name : arrTypes[1].name),
        purpose: f.purpose,
        docs: f.docs,
        financesTypeID: f.financesTypeID,
        userID: f.userID,
        userName: this.fnGetUser(f.userID),
        entryDate: f.entryDate
      });
    },
    fnMapRefundRecord: function(f) {
      return Em.Object.create({
        iD: f.iD,
        amount: f.amount,
        date: f.date,
        note: f.note,
        docs: f.docs,
        financesTypeID: f.financesTypeID,
        userID: f.userID,
        userName: this.fnGetUser(f.userID),
        entryDate: f.entryDate
      });
    },
    fnMapActivitiesRecord: function(acts) {
      return Em.Object.create({
        iD: acts.iD,
        claimID: acts.claimID,
        activityTypeID: acts.activityTypeID,
        body: acts.body,
        dueDate: acts.dueDate,
        entryDate: acts.entryDate,
        from: this.fnGetFrom(acts),
        subject: this.fnGetSubject(acts),
        userID: acts.userID,
        userName: this.fnGetUser(acts.userID),
        icon: 'img18-' + this.fnGetIcon(acts.activityTypeID),
        to: this.fnGetTo(acts),
        docs: acts.docs,
        toID: acts.toID,
        fromText: acts.fromText,
        toText: acts.toText
      });
    },
    cmdActivities: [
      {
        icon: "img28-sent_mail",
        tmp: "tmpAction_sendEmail",
        title: "Siųsti el. laišką",
        activityTypeID: 1
      }, {
        icon: "img28-recieved_mail",
        tmp: "tmpAction_addEmail",
        title: "Įkelti el. laišką",
        activityTypeID: 2
      }, {
        icon: "img28-tasks",
        tmp: "tmpAction_task",
        title: "Užduotis",
        activityTypeID: 3
      }, {
        icon: "img28-phone",
        tmp: "tmpAction_phone",
        title: "Pokalbis telefonu",
        activityTypeID: 4
      }, {
        icon: "img28-meeting",
        tmp: "tmpAction_meeting",
        title: "Susitikimas",
        activityTypeID: 5
      }, {
        icon: "img28-note",
        tmp: "tmpAction_note",
        title: "Užrašas",
        activityTypeID: 6
      }
    ],
    cmdFinances: {
      addDamage: {
        tmp: "tmpAddDamage",
        title: "Žalos suma",
        txt: "Įvesti žalos sumą"
      },
      addBenefit: {
        tmp: "tmpAddInsuranceBenefit",
        title: "Draudimo išmoka",
        txt: "Įvesti draudimo išmoką",
        financesTypeID: 5
      },
      addCompensation: {
        tmp: "tmpAddCompensation"
      }
    },
    actViewZone: "#actionsEnterOfClaimReg",
    frm: "#contentOfClaimReg",
    activityTypeID: "",
    goToOtherView: function(e) {
      var p;

      p = $.extend(e.context, {
        claim: this.claim
      });
      return this.replaceActivityView(p);
    },
    replaceActivityView: function(p) {
      var actView, scroll;

      scroll = $(window).scrollTop();
      actView = $(this.actViewZone);
      if (actView.length > 0) {
        if (actView.html().length > 0) {
          ACTIVITYVIEW.remove();
          actView.empty();
        }
      }
      if (p) {
        ACTIVITYVIEW = this.newActionView.create(p);
      } else {
        ACTIVITYVIEW = this.mainView.create({
          controller: this
        });
      }
      ACTIVITYVIEW.appendTo(this.actViewZone);
      return Em.run.next(scroll, function() {
        return $(window).scrollTop(this);
      });
    },
    deleteForm: function(e) {
      var cnt, frm, frmOpt, me;

      cnt = e.context;
      frm = $(this.frm);
      frmOpt = frm.data("ctrl");
      me = this;
      return oCONTROLS.dialog.Confirm({
        title: "Veiksmas '" + cnt.title + "'",
        msg: "Ištrinti šį veiksmą'?"
      }, function() {
        return SERVER.update2({
          Action: "Delete",
          DataToSave: {
            id: cnt.iD,
            DataTable: frmOpt.tblUpdate
          },
          "Ctrl": frm,
          "source": frmOpt.Source,
          CallBackAfter: function(Row) {
            var obj;

            switch (cnt.tmp) {
              case "tmpAddDamageCA":
              case "tmpAddDamageKASKO":
                obj = "finDamageTbl";
                break;
              case "tmpAddInsuranceBenefit":
                obj = "finInsurerTbl";
                break;
              case "tmpAddCompensation":
                obj = "finOtherPartyTbl";
                break;
              default:
                obj = "activitiesTbl";
            }
            (function(cnt) {
              var r;

              r = this.findProperty("iD", cnt.iD);
              return this.removeObject(r);
            }).call(me[obj], cnt);
            return me.cancelForm();
          }
        });
      });
    },
    saveForm: function(e) {
      var Action, CallBackAfter, ClaimID, DataToSave, addData, context, execOnSuccess, form, formOpts, me;

      form = $(this.frm);
      context = e.view.bindingContext;
      execOnSuccess = e.execOnSuccess;
      formOpts = form.data('ctrl');
      me = this;
      addData = {};
      Action = formOpts.NewRec ? "Add" : "Edit";
      if (Action === "Add") {
        ClaimID = this.claim.iD;
        addData = {
          Fields: ["ClaimID"],
          Data: [ClaimID]
        };
        if (context.activityTypeID) {
          addData.Fields.push("ActivityTypeID", "FromID");
          addData.Data.push(context.activityTypeID, oDATA.GET("userData").emData[0].userID);
        } else if (context.financesTypeID) {
          addData.Fields.push("FinancesTypeID");
          addData.Data.push(context.financesTypeID);
        }
      }
      DataToSave = oCONTROLS.ValidateForm(form, addData);
      if (!DataToSave && e.isTrigger) {
        oCONTROLS.dialog.Alert({
          title: 'Veiksmo išsaugojimas',
          msg: 'Užpildykite pažymėtus laukus..'
        });
      }
      if (DataToSave) {
        CallBackAfter = function(Row) {
          if (context.activityTypeID) {
            me.setActivitiesTable();
          } else {
            me.setFinancesTables();
          }
          if (execOnSuccess) {
            return execOnSuccess(Row, form);
          } else {
            return me.cancelForm();
          }
        };
        return SERVER.update2({
          Action: Action,
          DataToSave: DataToSave,
          Ctrl: form,
          source: formOpts.Source,
          CallBackAfter: CallBackAfter
        });
      }
    },
    cancelForm: function() {
      this.replaceActivityView();
      $("div.validity-tooltip").remove();
      return this;
    },
    mainView: Em.View.extend({
      addDamage: {},
      addBenefit: {},
      addCompensation: {},
      init: function() {
        var claimTypeID, cmdFinances, comp, ctrl;

        this._super();
        ctrl = App.tabClaimsRegulationController;
        claimTypeID = ctrl.claim.claimTypeID;
        cmdFinances = ctrl.cmdFinances;
        this.addDamage = $.extend({}, cmdFinances.addDamage, {
          tmp: cmdFinances.addDamage.tmp + (claimTypeID === 1 ? "KASKO" : "CA")
        });
        this.addBenefit = $.extend({}, cmdFinances.addBenefit);
        this.addBenefit.title += " (" + this.controller.claim.insPolicy.insurerName + ")";
        comp = claimTypeID === 1 ? {
          title: "Kaltininko kompensacija",
          txt: "Įvesti kaltininko kompensaciją",
          financesTypeID: 7
        } : {
          title: "Kompensacija nukentėjusiam",
          txt: "Įvesti kompensaciją nukentėjusiam",
          financesTypeID: 6
        };
        return this.addCompensation = $.extend({}, cmdFinances.addCompensation, comp);
      },
      controller: App.tabClaimsRegulationController,
      templateName: 'tmpActionMain'
    }),
    newActionView: Em.View.extend({
      isNew: true,
      deleteButton: false,
      init: function() {
        var ctrl, prop, _ref;

        this._super();
        if (!this.tmp) {
          prop = {
            isNew: false
          };
          ctrl = App.tabClaimsRegulationController;
          if (this.activityTypeID) {
            $.extend(prop, ctrl.cmdActivities.findProperty("activityTypeID", this.activityTypeID));
          } else {
            switch (this.financesTypeID) {
              case 1:
              case 2:
              case 3:
              case 4:
                $.extend(prop, ctrl.cmdFinances.addDamage);
                if ((_ref = this.financesTypeID) === 1 || _ref === 2) {
                  prop.tmp += "KASKO";
                } else {
                  prop.tmp += "CA";
                }
                break;
              case 5:
                $.extend(prop, ctrl.cmdFinances.addBenefit);
                break;
              case 6:
              case 7:
                $.extend(prop, ctrl.cmdFinances.addCompensation);
                if (this.financesTypeID === 6) {
                  $.extend(prop, {
                    title: "Kompensacija nukentėjusiam"
                  });
                } else {
                  $.extend(prop, {
                    title: "Kaltininko kompensacija"
                  });
                }
                break;
              default:
                console.error('no tmp for' + this.financesTypeID);
            }
          }
          $.extend(this, prop);
        }
        return this.set("childView", Em.View.extend({
          templateName: this.tmp
        }));
      },
      didInsertElement: function() {
        var claim, divExt, frm, me, user;

        this._super();
        frm = $(this.frm);
        claim = this.claim;
        me = this;
        if (this.isNew) {
          switch (this.activityTypeID) {
            case 3:
            case 4:
            case 5:
              divExt = frm.find("div.row").find("div.ExtendIt:first");
              user = oDATA.GET("userData").emData[0];
              if (this.activityTypeID === 3) {
                divExt.data("ctrl").Value = user.userID;
              } else {
                Em.run.next({
                  divExt: divExt,
                  user: user
                }, function() {
                  return this.divExt.find("input").val(this.user.userName);
                });
              }
              break;
            default:
              console.log("loaded view");
          }
        } else {
          (function(iD) {
            this.NewRec = 0;
            return this.id = iD;
          }).call(frm.data("ctrl"), this.iD);
          this.set("deleteButton", true);
        }
        oCONTROLS.UpdatableForm({
          frm: this.frm,
          btnSaveToDisable: frm.find("button.btnSave")
        });
        if (!this.isNew) {
          return this.makeAttach(this, frm, claim);
        } else {
          return $('<div class="row fileupload-buttonbar box_2pr"><center><i class="img16-attach"></i><a class="fileinput-button">Išsaugoti ir prisegti dokumentus</a></center></div>').appendTo(this.uploadZone).find('a').on("click", function(e) {
            e.preventDefault();
            return $("#contentOfClaimReg").find("button.btnSave").trigger({
              type: "click",
              execOnSuccess: function(row, frm) {
                oCONTROLS.UpdatableForm_toSaved(row.iD, frm);
                $(me.uploadZone).empty();
                return Em.run.next(me, function() {
                  return me.makeAttach(row, frm, claim);
                });
              }
            });
          });
        }
      },
      makeAttach: function(row, frm, claim) {
        var categoryOpts, tblProps;

        categoryOpts = {
          accident: {
            iD: claim.accidentID,
            title: "Įvykio dokumentai"
          },
          driver: {
            iD: claim.accident.driverID,
            title: "Vairuotojo '" + claim.accident.driver + "' dokumentai"
          },
          vehicles: [
            {
              iD: claim.vehicleID,
              title: "TP " + claim.vehicle.make + " " + claim.vehicle.model + ", " + claim.vehicle.plate
            }
          ]
        };
        tblProps = {
          Fields: ["ActivityID", "DocID"],
          Data: [row.iD]
        };
        switch (frm.data("ctrl").tblUpdate) {
          case "tblFinances":
            tblProps.DataTable = "tblDocsInFin";
            break;
          case "tblActivities":
            tblProps.DataTable = "tblDocsInActivity";
            break;
          default:
            console.error('no such tbl');
        }
        $(this.uploadZone).UploadFiles({
          categoryOpts: categoryOpts,
          showFromAccident: true,
          requireCategory: true,
          docsController: "claimDocController",
          updateRelationsTbl: tblProps
        });
        App.claimDocController.setDocs(tblProps.DataTable, row.iD);
        if (!$.isEmptyObject(DOCSVIEW)) {
          DOCSVIEW.remove();
          DOCSVIEW.destroy();
        }
        return DOCSVIEW = Em.View.create({
          opts: null,
          templateName: "tmpDocsView",
          tagName: "ul",
          classNames: ["gallery", "ui-helper-reset", "ui-helper-clearfix"],
          controller: App.claimDocController,
          didInsertElement: function() {
            this._super();
            return this.$().data("opts", this.opts);
          }
        }).appendTo(this.uploadZone);
      },
      templateName: 'tmpActionWrapper',
      frm: "#contentOfClaimReg",
      uploadZone: "#uploadClaimDocs"
    })
  });

  App.TabClaimsRegulationView = Ember.View.extend(App.HidePreviousWindow, {
    previuosWindow: '#divClaimsList',
    thisWindow: '#divClaimRegulation',
    init: function() {
      this._super();
      if (!$.isEmptyObject(ACTIVITYVIEW)) {
        ACTIVITYVIEW.remove();
        ACTIVITYVIEW.destroy();
      }
      this.controller.setActivitiesTable().setFinancesTables();
      return Em.run.next(this, function() {
        return this.controller.setSteps();
      });
    },
    templateName: 'tmpClaimRegulation',
    didInsertElement: function() {
      var ctrl, idx, me, stepBox;

      this._super();
      ctrl = this.controller;
      ctrl.cancelForm();
      ctrl.claimStatusBefore = ctrl.claim.claimStatus;
      me = this;
      idx = 0;
      stepBox = {};
      this.$().find("#claimsSteps").on('click', 'a', function(e) {
        var classes, stepNo, steps;

        stepBox = $(this).closest("div.step-box");
        classes = stepBox.attr("class");
        stepNo = stepBox.data("stepno");
        idx = stepNo - 1;
        steps = ctrl.claim.steps;
        if (classes.indexOf("completed") > 0) {
          ctrl.fnStepBack(idx);
        } else if (classes.indexOf("current") > 0) {
          if (stepNo === 1) {
            ctrl.fnStepForward(idx);
          } else if (stepNo === 5) {
            ctrl.fnStepForward(idx);
          } else {
            ctrl.fnConfirm(stepBox, idx);
            if (stepNo === 2) {
              Em.run.next(this, function() {
                return stepBox.find("input.date").ValidateOnBlur({
                  Allow: 'Date'
                }).datepicker();
              });
            }
          }
        }
        return false;
      }).on('click', 'button', function(e) {
        var stepVal;

        if (idx === 1) {
          stepVal = stepBox.find("input.date").val();
          ctrl.stepVal[idx] = stepVal;
        }
        ctrl.fnStepForward(idx);
        stepBox.find("div.step-box-addon").slideUp('slow').remove();
        return false;
      });
      return $("#claimRegulationTab").tabs().on("tabsactivate", function(event, ui) {
        if (ui.newTab.index() === 1) {
          return console.log("first");
        }
      });
    },
    controller: App.tabClaimsRegulationController
  });

  App.claimDocController = Em.ResourceController.create({
    relationTbl: null,
    activityID: null,
    docs: [],
    refreshDocs: function() {
      var ctrl;

      this.setDocs(this.relationTbl, this.activityID);
      ctrl = App.tabClaimsRegulationController;
      if (this.relationTbl === "tblDocsInActivity") {
        return ctrl.setActivitiesTable({
          iD: this.activityID,
          docNo: this.docs.length
        });
      } else {
        return ctrl.setFinancesTables({
          iD: this.activityID,
          docNo: this.docs.length
        });
      }
    },
    setDocs: function(relationTbl, activityID) {
      var docTypes, docs, docsPath, fnGetDocType, fnGetIcon, fnGetUser, relTbl, url, users;

      this.relationTbl = relationTbl;
      this.activityID = activityID;
      relTbl = oDATA.GET(relationTbl).emData.filter(function(doc) {
        return doc.activityID === activityID;
      }).map(function(doc) {
        return doc.docID;
      });
      docsPath = oDATA.GET("userData").emData[0].docsPath;
      url = "Uploads/" + docsPath;
      users = oDATA.GET("tblUsers").emData;
      docTypes = oDATA.GET("tblDocTypes").emData;
      fnGetIcon = function(ext) {
        ext = ext.slice(0, 3);
        return "img32-doc_" + (ext === "xls" || ext === "doc" || ext === "pdf" ? ext : "unknown");
      };
      fnGetUser = (function(userID) {
        var u;

        u = users.find(function(user) {
          return user.iD === userID;
        });
        return u.firstName + " " + u.surname;
      });
      fnGetDocType = function(typeID) {
        return docTypes.find(function(type) {
          return type.iD === typeID;
        }).name;
      };
      docs = oDATA.GET("tblDocs").emData.filter(function(doc) {
        return relTbl.contains(doc.iD);
      }).map(function(doc) {
        var file, user;

        user = fnGetUser(doc.userID);
        file = "/" + doc.iD + "." + doc.fileType;
        return Em.Object.create({
          docID: doc.iD,
          hasThumb: doc.hasThumb,
          urlThumb: url + "/Thumbs" + file,
          urlDoc: url + file,
          docType: fnGetDocType(doc.docTypeID),
          description: doc.description,
          docName: doc.docName,
          userName: user,
          fileDate: doc.fileDate,
          fileName: doc.docName + "." + doc.fileType,
          fileIcon: !doc.hasThumb ? fnGetIcon(doc.fileType) : "img32-doc_unknown",
          docDetails: "Įkėlė " + user + " " + doc.fileDate + ", dydis - " + Math.ceil(doc.fileSize / 10000) / 100 + "Mb"
        });
      });
      return this.set("docs", docs);
    }
  });

  docsViewOpts = {
    opts: null,
    templateName: "tmpDocsView",
    tagName: "ul",
    classNames: ["gallery", "ui-helper-reset", "ui-helper-clearfix"],
    controller: App.dialogDocController,
    didInsertElement: function() {
      this._super();
      return this.$().data("opts", this.opts);
    }
  };

  /*
  MY.tabAccidents={}
  MY.tabAccidents.SelectedClaimView = App.SelectedClaimView.create(
  	rowContext: { Claims2: d.Claims2, newClaim: false, LossAmount: d.loss, InsuranceType: d.type, accidentID: d.accidentID, accidentDate: d.accidentDate }
  	elementId: "ClaimDetailsContent", contentBinding: 'App.claimEditController.content'
  )
  tr.addClass("selectedClaim title").after("<tr><td id='ClaimWraper' colspan='7' class='selectedClaim content'></td></tr>");
  MY.tabAccidents.SelectedClaimView.appendTo("#ClaimWraper");
  tr = $(e.target).closest("tr");ClaimW = $("#ClaimWraper")
  if (ClaimW.length > 0)
  	MY.tabAccidents.SelectedClaimView.remove()
  	ClaimW.remove();
  */


}).call(this);

/*
//@ sourceMappingURL=tabClaimsRegulation.map
*/
