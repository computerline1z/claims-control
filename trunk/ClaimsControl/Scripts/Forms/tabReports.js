// Generated by CoffeeScript 1.6.2
(function() {
  var w=window, App=w.App, Em=w.Em, oGLOBAL=w.oGLOBAL, oDATA=w.oDATA, oCONTROLS=w.oCONTROLS, MY=w.MY;
  var REPORTVIEW;

  App.reportsStart = function() {
    var arrNames, arrObj;

    arrObj = ["tblInsurers", "proc_InsPolicies", "proc_Vehicles", "tblClaimTypes", "proc_Accidents"];
    arrNames = ["insurers", "policies", "vehicles", "claimTypes", "accidents"];
    return oDATA.execWhenLoaded(arrObj, function() {
      var ctrl;

      ctrl = App.tabReportsController;
      return arrObj.forEach(function(obj, i) {
        return ctrl.set(arrNames[i], oDATA.GET(arrObj[i]).emData);
      });
    });
  };

  /* 
  #	$("#reportType").ComboBox() pasirenkant reporta atsisiunciami duomenys
  #
  */


  REPORTVIEW = {};

  App.tabReportsController = Em.ArrayController.create({
    target: (function() {
      return this;
    }).property(),
    content: [],
    fields: [],
    insurers: {},
    policies: {},
    vehicles: {},
    claimTypes: {},
    accidents: {},
    getInsurerName: function(insPolicyID) {
      if (insPolicyID) {
        return this.insurers.findProperty("iD", insPolicyID).name;
      } else {
        return "Neapdrausta";
      }
    },
    rep_claimsList: function(oData) {
      var content, fields,
        _this = this;

      content = oData.emData.map(function(row) {
        var acc, policy;

        acc = _this.accidents.findProperty("iD", row.accidentID);
        policy = _this.policies.findProperty("iD", row.insPolicyID);
        return {
          claimType: _this.claimTypes.findProperty("iD", row.claimTypeID).name,
          accDate: acc.date,
          accCountry: acc.place.slice(0, acc.place.indexOf(",")),
          accType: acc.accType,
          plate: _this.vehicles.findProperty("iD", row.vehicleID).plate,
          driver: acc.driver,
          quilty: (acc.IsNotOurFault ? "Trečia šalis" : "Mes"),
          insurer: _this.getInsurerName(policy.insurerID),
          policyNo: policy.policyNumber,
          lossAmount: row.lossAmount,
          closed: (row.claimStatus === 5 ? "Taip" : "Ne"),
          iD: row.iD
        };
      });
      fields = [
        {
          name: "claimType",
          title: "Tipas"
        }, {
          name: "accDate",
          title: "Įvykio data"
        }, {
          name: "accCountry",
          title: "Šalis"
        }, {
          name: "accType",
          title: "Įvykio tipas"
        }, {
          name: "plate",
          title: "Valst.Nr."
        }, {
          name: "driver",
          title: "Vairuotojas"
        }, {
          name: "quilty",
          title: "Kaltininkas"
        }, {
          name: "insurer",
          title: "Draudikas"
        }, {
          name: "policyNo",
          title: "Sutartis"
        }, {
          name: "lossAmount",
          title: "Žalos suma"
        }, {
          name: "closed",
          title: "Uždaryta"
        }
      ];
      fields.forEach(function(f) {
        return f.visible = true;
      });
      this.set("content", content).set("fields", fields).set("sortProperties", ["accDate"]).set("content", this.get("arrangedContent"));
      return false;
    },
    changeVisibleCols: function(e) {
      return MY.dialog = JQ.Dialog.create({
        ctrl: App.tabReportsController,
        chkLeft: [],
        chkRight: [],
        controllerBinding: "App.tabReportsController",
        init: function() {
          var div, fields;

          this._super();
          this.title = "Rodomi ataskaitos stulpeliai";
          fields = this.ctrl.fields;
          div = Math.ceil(fields.length / 2);
          this.chkLeft = fields.slice(0, div);
          return this.chkRight = fields.slice(div);
        },
        didInsertElement: function() {
          return this._super();
        },
        width: 700,
        buttons: {
          "Išsaugoti pakeitimus": function() {
            REPORTVIEW.sortableGrid("updateGrid", true);
            return $(this).dialog("close");
          }
        },
        cancelLink: true,
        templateName: 'tmpReportCols'
      }).append();
    },
    openPdf: function(e) {
      return this.getReport("pdf");
    },
    openXls: function(e) {
      return this.getReport("xls");
    },
    getReport: function(type) {
      var dataPars, fields, ids, me,
        _this = this;

      ids = this.content.map(function(row) {
        return row.iD;
      });
      fields = [];
      this.fields.forEach(function(row) {
        if (row.visible) {
          return fields.push(row.name);
        }
      });
      dataPars = $.extend({}, {
        type: type
      }, {
        reportName: this.report.name,
        Fields: fields,
        ID: ids,
        sortedField: this.sortProperties[0],
        asc: this.sortAscending
      });
      me = this;
      console.log(dataPars);
      return $.ajax({
        url: "Download/makeReport",
        dataType: 'json',
        type: 'POST',
        data: dataPars,
        traditional: true,
        success: function(json) {
          if ($("#downloadFrame").length > 0) {
            $("#downloadFrame").remove();
          }
          return $("body").append("<iframe id='downloadFrame' target='_blank' src='/Download/GetFile/" + me.report.name + "." + type + "' style='width: 100%;height:800px'></iframe>");
        },
        error: function(xhr, x, y) {},
        complete: function(xhr, x, y) {}
      });
    },
    reportsZone: "#reportsViewZone",
    refreshView: function() {
      return $(this.reportsZone).find("table").find("tbody").replaceWith(oCONTROLS.table.getBody({
        fields: this.fields,
        content: this.content
      }));
    },
    fnAppendReport: function(report) {
      var fn, oData, reportsZone;

      reportsZone = $(this.reportsZone);
      fn = this[report.name];
      oData = oDATA.GET(report.name);
      if (typeof oData === 'string') {
        oData = oDATA.GET(oData);
      }
      if (typeof fn === 'function') {
        fn.call(this, oData);
      } else {
        console.error("NotaFunction");
      }
      this.set("report", report);
      if (reportsZone.html().length === 0) {
        return Em.run.next(this, function() {
          return REPORTVIEW = reportsZone.sortableGrid({
            controller: this
          });
        });
      } else {
        return REPORTVIEW.sortableGrid("updateGrid", true);
      }
    }
  });

  App.TabReportsMainView = Ember.View.extend({
    init: function() {
      return this._super();
    },
    didInsertElement: function() {
      this._super();
      return $("#reportType").ComboBox({
        controller: App.tabReportsController,
        fnChangeCallBack: function(e, ui) {
          var controller, report;

          report = oDATA.GET('words_Reports').emData.findProperty("iD", ui.item.id);
          controller = this.controller;
          if (!oDATA.GET(report.name)) {
            return oDATA.fnLoad2({
              url: "Reports/Main",
              name: report.name,
              dataPars: {
                bla: "opa1",
                bla2: "opa3"
              },
              ctrl: controller.reportsZone,
              callBack: function() {
                return controller.fnAppendReport.call(controller, report);
              }
            });
          } else {
            return controller.fnAppendReport.call(controller, report);
          }
        }
      });
    },
    templateName: 'tmpMainReport',
    controller: App.tabReportsController
  });

  /*
  MY.tabAccidents={}
  MY.tabAccidents.SelectedClaimView = App.SelectedClaimView.create(
  	rowContext: { Claims2: d.Claims2, newClaim: false, LossAmount: d.loss, InsuranceType: d.type, accidentID: d.accidentID, accidentDate: d.accidentDate }
  	elementId: "ClaimDetailsContent", contentBinding: 'App.claimEditController.content'
  )
  tr.addClass("selectedClaim title").after("<tr><td id='ClaimWraper' colspan='7' class='selectedClaim content'></td></tr>");
  MY.tabAccidents.SelectedClaimView.appendTo("#ClaimWraper");
  tr = $(e.target).closest("tr");ClaimW = $("#ClaimWraper")
  if (ClaimW.length > 0)
  	MY.tabAccidents.SelectedClaimView.remove()
  	ClaimW.remove();
  */


}).call(this);

/*
//@ sourceMappingURL=tabReports.map
*/
